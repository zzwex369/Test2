<?xml version="1.0" encoding="utf-8"?>
<s:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%"
		  xmlns:component="com.xyw.sys.custom.component.*"
		  creationComplete="moduleCreationComplete()">
	<fx:Declarations>
		<s:RemoteObject id="DJBService" destination="DJBService" endpoint="{this.parentApplication.contextRoot}/messagebroker/amf" showBusyCursor="true">
			<s:method name="saveFirstBirthCertificateDJB" result="saveFirstBirthCertificateDJBHandler(event)"/>
		</s:RemoteObject>
		<s:RemoteObject id="systemService" destination="systemService" endpoint="{this.parentApplication.contextRoot}/messagebroker/amf" showBusyCursor="true">
			<s:method name="getComboBoxData" result="getComboBoxDataHandler(event)"/>
		</s:RemoteObject>
	</fx:Declarations>
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		s|HGroup
		{
			horizontalAlign:right;
			verticalAlign:middle;
		}
		s|DropDownList
		{
			skinClass:ClassReference("com.xyw.sys.custom.skin.CustomDropDownListSkin");
			selectionColor:#DDDDDD;
			rollOverColor:#EEEEEE;	
		}
		s|Button
		{
			skinClass:ClassReference("com.xyw.sys.custom.skin.CustomButtonSkin");
		}
		s|TextInput
		{
			fontFamily:微软雅黑;
		}
		.mustQuery {
			color:red;
			fontSize:14px;
		}
	</fx:Style>
	
	<fx:Script>
		<![CDATA[
			import com.xyw.module.csyxzm.csyxzmsfdjb.Querywindow;
			import com.xyw.module.csyxzm.model.D304;
			import com.xyw.module.csyxzm.model.QueryBirthRequest;
			import com.xyw.module.delivery.model.D601;
			import com.xyw.sys.custom.component.CompMethod;
			import com.xyw.sys.custom.component.CustomIcon;
			import com.xyw.sys.custom.component.SecurityControler;
			import com.xyw.sys.model.ComboBoxDataRequest;
			import com.xyw.sys.model.SystemUser;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.DateField;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.formatters.DateFormatter;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			import mx.utils.StringUtil;
			
			import spark.formatters.DateTimeFormatter;
			include "../csyxzmAs/csyxzm.as";
			private var comboBoxDataRequest:ComboBoxDataRequest;
			private var d304:D304;
			public var systemUser:SystemUser = null;
			private var d304_04_str:String;
			private var d304_04_date:Date;
			private var d304_32:Number =0;
			private var d304_33:String;
			private var d304_38:String;
			private var d304_39:String;
			
			[Bindable]
			public var gradeVal:String="0"; //单双亲  父亲1  母亲2  双亲0
			[Bindable]
			private var birthVal:int=1;  //出生日期   1显示，2不显示
			[Bindable]
			private var phoneVal:int=2;  //联系电话   1显示，2不显示
			[Bindable]
			private var areaVal:int=2; //家庭地址 户口地址    1显示，2不显示
			[Bindable]
			private var cardVal:int=1; //结婚证编号 亲子鉴定证明编号    1显示，2不显示
			[Bindable]
			private var printVal:String="10"; //打印状态  10首发登记表
			public var loadDataArr:Array=[[[""],[""],[""],[""],[""],[""]],[[""],[""],[""],[""],[""],[""],],[[""]],[[""],[""]],[[""],[""]],[[""]],[[""]],[[""]],[[""]],[[""]]];
			
			//****************启动按钮权限控制****************//
			private function security():void{
				SecurityControler.start(null,'visible');
				SecurityControler.addAllPerms(this.parentApplication.permissionList);
			}
			//初始化方法
			private function moduleCreationComplete():void
			{
				//security();
				this.systemUser = this.parentApplication.systemUser; // systemUser.setFumuDuka(d801_16); 
				//检查读卡权限
				if(this.systemUser.duka == "1"){
					this.duka1.enabled = true;
					this.duka4.enabled = true;
				}
				this.initializeComboBox();//初始化数据
				var date:Date = new Date();
				this.hour.text = (String)(date.hours);
				this.minute.text = (String)(date.minutes);
				
				this.parents3.opensave =opensave;
			}
			public function opensave():void{
				this.saveButton.enabled = true;
			}
			
			/*------下拉菜单查询数据-----------*/
			private function initializeComboBox():void
			{
				this.comboBoxDataRequest = new ComboBoxDataRequest();
				comboBoxDataRequest.showPrompt = true;
				comboBoxDataRequest.flag = "S301_01";
				comboBoxDataRequest.sql = "select * from S301_01";
				this.systemService.getComboBoxData(this.comboBoxDataRequest);
				
				comboBoxDataRequest = new ComboBoxDataRequest();
				comboBoxDataRequest.showPrompt = true;
				comboBoxDataRequest.sql = "select t.d101_01, t.d101_02 from D101 t";
				comboBoxDataRequest.flag = "D101";
				this.systemService.getComboBoxData(this.comboBoxDataRequest);
				
				comboBoxDataRequest = new ComboBoxDataRequest();
				comboBoxDataRequest.showPrompt = true;
				comboBoxDataRequest.sql = "select * from S301_06";
				comboBoxDataRequest.flag = "S301_06";
				this.systemService.getComboBoxData(this.comboBoxDataRequest);
				
				comboBoxDataRequest = new ComboBoxDataRequest();
				comboBoxDataRequest.showPrompt = true;
				comboBoxDataRequest.sql = "select * from S301_07";
				comboBoxDataRequest.flag = "S301_07";
				this.systemService.getComboBoxData(this.comboBoxDataRequest);
				
				comboBoxDataRequest = new ComboBoxDataRequest();
				comboBoxDataRequest.showPrompt = false;
				comboBoxDataRequest.sql = "select * from S301_09 t where t.S_03='"+this.systemUser.institutionCode+"'";
				comboBoxDataRequest.flag = "S301_09";
				this.systemService.getComboBoxData(this.comboBoxDataRequest);
				
			}
			
			/*-----------------返回数据放到赋值到下拉菜单-----------------*/
			private function getComboBoxDataHandler(event:ResultEvent):void
			{
				var comboBoxDataResponse:Object =  event.result;
				var flag:String = comboBoxDataResponse.flag;
				var comboBoxDataList:ArrayCollection = comboBoxDataResponse.comboBoxDataList;
				
				if(flag == "S301_01")
				{
					this.d304_03.dataProvider = comboBoxDataList;
					this.d304_03.selectedIndex = 0;
				}else if(flag == "D101")
				{
					var index:int = this.getDropDownListSelectedIndex(comboBoxDataList, this.systemUser.institutionCode);
					this.d304_11.dataProvider = comboBoxDataList;
					this.d304_11.selectedIndex = index;
					this.d304_11.enabled = false;
				}else if(flag == "S301_06")
				{
					this.d304_30.dataProvider = comboBoxDataList;
					this.d304_30.selectedIndex = 1;
				}else if(flag == "S301_07")
				{
					this.d304_29.dataProvider = comboBoxDataList;
					this.d304_29.selectedIndex = 0;
				}else if(flag == "S301_09")
				{
					this.d304_12.dataProvider = comboBoxDataList;
					this.d304_12.selectedIndex = 0;
				}
			}
			
			/*-----------------默认出生地点分类        医院---------------------*/
			private function getDropDownListSelectedIndex(arrayCollection:ArrayCollection, defaultValue:String):int
			{
				var len:uint = arrayCollection.length;
				var i:uint = 0;
				var index:int = 0;
				while(i < len) {
					var comboBoxDataP:Object = arrayCollection.getItemAt(i);
					if(comboBoxDataP.data == defaultValue) {
						index = arrayCollection.getItemIndex(comboBoxDataP);
						break;
					}
					i++;
				}
				return index;
			}
			
			/*--------------------加载分娩信息--------------------*/
			public function queryDeliveryRegistHandler(d601:Object):void
			{
				opensave();
				this.d304_11.selectedIndex = this.getDropDownListSelectedIndex(ArrayCollection(this.d304_11.dataProvider),d601.d60102);
				this.d304_02.text = d601.d60155;//新生儿姓名
				//婴儿性别
				var d304_03DataProvider:ArrayCollection = ArrayCollection(this.d304_03.dataProvider);
				var d30403Index:int = this.getDropDownListSelectedIndex(d304_03DataProvider,d601.d60140);
				this.d304_03.selectedIndex = d30403Index;
				//出生日期
				if(d601.d60103 != null) {
					this.d304_04.text = d601.d60103.substring(0,10);
					this.hour.text = d601.d60103.substring(11,13);
					this.minute.text = d601.d60103.substring(14,16);
				}
				this.d304_06.value = d601.d60121;//孕周
				this.d304_07.text = d601.d60122;//孕周天
				this.d304_08.value = d601.d60144;//身长  cm
				this.d304_09.value = d601.d60143;//体重  g
				this.d304_10.text = String(d601.d60104);//住院病历号
				this.d304_12.text = d601.d60164;//接生员
				
				this.gradeVal="0";
				loadDataArr=putloadDataArr(d601);
				parents3.defaultCheckParent(gradeVal,loadDataArr,printVal);
				
				//加载领证人信息
				var d304_29DataProvider:ArrayCollection = ArrayCollection(this.d304_29.dataProvider);
				var d30429Index:int = 0;
				//加载领证人信息
				if(d601.d60159 == d601.d60105){
					d30429Index = this.getDropDownListSelectedIndex(d304_29DataProvider,"2");
					this.d304_29.selectedIndex = d30429Index;
					this.changeLicen();
				} else if(d601.d60159 != null && d601.d60159 == d601.d60172){
					d30429Index = this.getDropDownListSelectedIndex(d304_29DataProvider,"1");
					this.d304_29.selectedIndex = d30429Index;
					this.changeLicen();
				} else {
					this.d304_28.text = d601.d60159;
				}
				
				this.d304_32 = d601.d60101;//分娩登记主键 d601_01
				this.d304_33 = d601.d60149;//婴儿健康状况
				this.d304_38 = d601.d60188;//生育证号
				this.d304_39 = d601.d60169;//联系电话
				
			}
			 private function putloadDataArr(d601:Object):Array{
				 loadDataArr[0][0] =d601.d60105;  //母亲姓名
				 loadDataArr[0][1] =d601.d60186;  //证件类别
				 loadDataArr[0][2] =d601.d60165;  //母亲证件号码
				 
				 loadDataArr[0][3] =d601.d60109;  //母亲民族
				 loadDataArr[0][4] =d601.d60167;  //母亲身份证地址
				 loadDataArr[0][5] =d601.d60185;  //母亲国籍
				 
				 
				 loadDataArr[1][0] =d601.d60172;  //父亲姓名
				 loadDataArr[1][1] =d601.d60187;  //证件类别
				 loadDataArr[1][2] =d601.d60175;  //父亲证件号码
				 
				 loadDataArr[1][3] =d601.d60174;  //父亲民族
				 loadDataArr[1][4] =d601.d60176;  //父亲身份证地址
				 loadDataArr[1][5] =d601.d60177;  //父亲国籍
				
				 loadDataArr[2][0] =d601.d60179;  //电话号码
				 
				 loadDataArr[3][0] ="";  //母亲户口地址
				 loadDataArr[3][1] ="";  //母亲家庭地址
				 
				 loadDataArr[4][0] ="";  //父亲户口地址
				 loadDataArr[4][1] ="";  //父亲家庭地址
				 
				 loadDataArr[5][0] ="";  //结婚证编号
				 
				 loadDataArr[6][0] ="";  //亲子鉴定证明编号
				 
				 var birthdayStr1:String ="";
				 if(d601.d60165!=null){   //母亲出生日期     母亲证件类型,母亲身份证号
					 birthdayStr1 =setBirthday(d601.d60186,d601.d60165);
				 }
				 loadDataArr[7][0] =birthdayStr1;
				 
				 var birthdayStr2:String ="";
				 if(d601.d60175 != null){   //父亲出生日期    父亲证件类型,父亲身份证号
					 birthdayStr2 =setBirthday(d601.d60187,d601.d60175);	 
				 }
				 loadDataArr[8][0] =birthdayStr2;
				 
				 loadDataArr[9][0] =""; //单双亲  父亲1    母亲2 
				
				 return loadDataArr;
			 }
			
			private function setBirthday(idType:String,cardIdCode:String):String
			{
				var birthDay:String ="";
				if(idType == "1"){
					var cardId:String = cardIdCode;
					if(cardId.length>=16){
						cardId=cardId.substring(6,14);
						birthDay = cardId.substring(0,4) + "-" + cardId.substring(4,6) + "-" + cardId.substring(6,8);
					}else{
						cardId=cardId.substring(6,12);
						birthDay = "19" + cardId.substring(0,2) + "-" + cardId.substring(2,4) + "-" + cardId.substring(4,6);
					}
				}
				return birthDay;
			}
			/*--------------验证首发登记表信息-----------------*/
			private function SaveFirshBirthCertiticateDJB():void 
			{
				var patternFather:RegExp = /^(\d{18,18}|\d{15,15}|\d{17,17}X|\d{17,17}x)$/g;
				var patternMonther:RegExp = /^(\d{18,18}|\d{15,15}|\d{17,17}X|\d{17,17}x)$/g;
				var patternLingzheng:RegExp = /^(\d{18,18}|\d{15,15}|\d{17,17}X|\d{17,17}x)$/g;
				
				if(this.d304_03.selectedItem.data == 0)
				{
					Alert.show("请选择性别!","系统提示");
					return;
				}
				if(this.d304_04.text == "")
				{
					Alert.show("请选择婴儿出生日期!","系统提示");
					return;
				}
				if((Number)(this.hour.text) < 0 || (Number)(this.hour.text) > 23) 
				{
					Alert.show("输入时间(小时)不符合格式", "系统提示");
					return;
				}
				if((Number)(this.minute.text) < 0 || (Number)(this.minute.text) > 59) 
				{
					Alert.show("输入时间(分钟)不符合格式", "系统提示");
					return;
				}
				if(this.d304_12.text == "")
				{
					Alert.show("请输入接生员!","系统提示");
					return;
				}
				if(this.d304_13.text == "")
				{
					Alert.show("请选择填表日期!","系统提示!");
					return;
				}
				if(this.d304_10.text == "")
				{
					Alert.show("请输入住院病历号!","系统提示!");
					return;
				}
				if(this.d304_07.text == "")
				{
					Alert.show("请输入孕周天数！","系统提示");
					return;
				}
				if((Number)(this.d304_07.text) < 0 || (Number)(this.d304_07.text) > 7) 
				{
					Alert.show("输入天数不符合格式", "系统提示");
					return;
				}
				if(this.d304_08.value == 0){
					Alert.show("请输入婴儿的身长！","系统提示");
					return;
				}
				if(this.d304_08.value >= 75){
					Alert.show("婴儿的身长应小于75cm！","系统提示");
					return;
				}
				if(this.d304_08.value <= 25){
					Alert.show("婴儿的身长应大于25cm！","系统提示");
					return;
				}
				if(this.d304_09.value == 0){
					Alert.show("请输入婴儿的体重！","系统提示");
					return;
				}
				if(this.d304_09.value >= 10000){
					Alert.show("婴儿的体重应小于10000g！","系统提示");
					return;
				}
				if(this.d304_09.value <= 300){
					Alert.show("婴儿的体重应大于300g！","系统提示");
					return;
				}
				if(this.d304_05.getAreaCode().length < 8) {
					Alert.show("出生地选到乡镇级别!", "系统提示");
					return;
				}
				if(parents3.verification()){
					return;
				}
				
				if(this.d304_32 == 0){
					Alert.show("请登记分娩登记!","系统提示");
					return;
				}
				Alert.yesLabel = '是'; 
				Alert.noLabel = '否';
				Alert.show('确认保存信息？','保存首发登记表',1|2,this,savevalidateBirthCertificate);
				
			}
			
			/*--------------保存首发登记表信息-----------------*/
			private function savevalidateBirthCertificate(event:CloseEvent):void
			{
				if(event.detail == Alert.YES){
					
					this.d304 = new D304();
					this.d304.d30402 = StringUtil.trim(this.d304_02.text);
					this.d304.d30403 = this.d304_03.selectedItem.data;
					
					var dateTimeFormatter:DateTimeFormatter = new DateTimeFormatter();
					dateTimeFormatter.dateTimePattern = "yyyy-MM-dd";
					var dateTime_str:String = this.d304_04.text;
					this.d304_04_str = dateTime_str + " " +  this.hour.text + ":" + this.minute.text;
					this.d304_04_date = DateFormatter.parseDateString(this.d304_04_str);
					this.d304.d30404 = this.d304_04_date;
					
					this.d304.d30405 = this.d304_05.getAreaCode();
					this.d304.d30406 = this.d304_06.value;
					this.d304.d30407 = this.d304_07.text;
					this.d304.d30408 = this.d304_08.value;
					this.d304.d30409 = this.d304_09.value;
					this.d304.d30410 = this.d304_10.text;
					
					this.d304.d30411 = this.d304_11.selectedItem.data;
					this.d304.d30412 = this.d304_12.text;
					this.d304.d30413 = this.d304_13.selectedDate;
					
					var saveDataArr:Array =parents3.saveRecord();
					this.d304.d30416 =equVaule(saveDataArr[0][0]); //母亲姓名
					this.d304.d30417 =equVaule(saveDataArr[0][1]); //母亲证件类别
					this.d304.d30418 =equVaule(saveDataArr[0][2]); //母亲证件号码
					if(saveDataArr[7][0] != null &&  saveDataArr[7][0] !="" ){
						this.d304.d30434 =DateField.stringToDate(saveDataArr[7][0],"YYYY-MM-DD"); //母亲出生日期
					}else{
						this.d304.d30434 =null;
					}
					this.d304.d30420 =equVaule(saveDataArr[0][3]); //母亲民族
					this.d304.d30421 =equVaule(saveDataArr[0][4]); //母亲身份证地址
					this.d304.d30419 =equVaule(saveDataArr[0][5]); //母亲国籍
					
						
					this.d304.d30422 =equVaule(saveDataArr[1][0]); //父亲姓名
					this.d304.d30423 =equVaule(saveDataArr[1][1]); //父亲证件类别
					this.d304.d30424 =equVaule(saveDataArr[1][2]); //父亲证件号码
					if(saveDataArr[8][0] != null && saveDataArr[8][0] !="" ){
						this.d304.d30435 =DateField.stringToDate(saveDataArr[8][0],"YYYY-MM-DD"); //父亲出生日期
					}else{
						this.d304.d30435 =null;
					}
					this.d304.d30426 =equVaule(saveDataArr[1][3]); //父亲民族
					this.d304.d30427 =equVaule(saveDataArr[1][4]); //父亲身份证地址
					this.d304.d30425 =equVaule(saveDataArr[1][5]); //父亲国籍

					this.d304.d30439 =equVaule(saveDataArr[2][0]); //电话号码;
						
					this.d304.d30414 =equVaule(saveDataArr[5][0]); //结婚证编号
					
					this.d304.d30415 =equVaule(saveDataArr[6][0]);//亲子鉴定证明编号
					
					var fm:String="";
					if(saveDataArr[9][0] !=null && saveDataArr[9][0]!="0"){
						fm =saveDataArr[9][0];
					}
					this.d304.d30445=fm;
					
					this.d304.d30428 = this.d304_28.text;
					this.d304.d30429 = this.d304_29.selectedItem.data;
					this.d304.d30430 = this.d304_30.selectedItem.data;
					this.d304.d30431 = this.d304_31.text;
					this.d304.d30432 = this.d304_32;
					this.d304.d30433 = this.d304_33;
					
					this.d304.d30438 = this.d304_38;
					this.d304.d30439 = this.d304_39;
					DJBService.saveFirstBirthCertificateDJB(d304);
				}
				
			}
			
			private function equVaule(value:String):String{
				if(value !=null && value !="null")
					return value;
				return "";
			}
			
			/*--------------保存返回跳转打印页面-----------------*/
			private function saveFirstBirthCertificateDJBHandler(event:ResultEvent):void
			{
				var queryBirthResponse:Object = event.result;
				if(queryBirthResponse.state) {
					this.saveButton.enabled = false;
					Alert.show(queryBirthResponse.promptMessage,"系统提示");
					var url:String = this.parentApplication.contextRoot + "/CertificateFirstDJBServlet?flagF=0&d30418=" + this.d304.d30418+"&d30424=" + this.d304.d30424+"&fm=" + this.d304.d30445;
					if(this.d304.d30402!=null && this.d304.d30402!=""){
						url = url+"&d30402=" + encodeURIComponent(this.d304.d30402);
					}
					navigateToURL(new URLRequest(url), null);
					
				} else {
					Alert.show(queryBirthResponse.errorMessage,"系统提示");
				}
			}
			
			/*--------------根据与婴儿关系加载领证人信息-----------------*/
			private function changeLicen():void
			{ 
				var d30430DataProvider:ArrayCollection = ArrayCollection(this.d304_30.dataProvider);
				var saveDataArr:Array =parents3.saveRecord();
				
				var id:String = this.d304_29.selectedItem.data;
				if(id == "1")   //领证人父亲 
				{
					this.d304_28.text =equVaule(saveDataArr[1][0]);
					this.d304_31.text =equVaule(saveDataArr[1][2]);
					var d30430Index:int =this.getDropDownListSelectedIndex(d30430DataProvider,equVaule(saveDataArr[1][1]));
					if(d30430Index != 0){
						this.d304_30.selectedIndex =d30430Index;
					}
				}else if(id == "2")   //领证人母亲
				{
					this.d304_28.text =equVaule(saveDataArr[0][0]);
					this.d304_31.text =equVaule(saveDataArr[0][2]);
					var d30430Index_:int =this.getDropDownListSelectedIndex(d30430DataProvider,equVaule(saveDataArr[0][1]));
					if(d30430Index_ != 0){
						this.d304_30.selectedIndex =d30430Index_;
					}
				}else
				{
					this.d304_28.text = "";
					this.d304_31.text = "";
					this.d304_30.selectedIndex = 1;
				}
			}
			
			/*--------------查询分娩登记信息-----------------*/
			private function query():void
			{
				try{
					if(this.parentMother.selected){
						if(this.d30416.text == ""){
							Alert.show("请输入母亲姓名!","系统提示");
							return;
						}
						if(this.d30418.text == ""){
							Alert.show("请输入母亲证件号码!","系统提示");
							return;
						}
					}else if(this.parentFather.selected){	
						if(this.d30416.text == ""){
							Alert.show("请输入父亲姓名!","系统提示");
							return;
						}
						if(this.d30418.text == ""){
							Alert.show("请输入父亲证件号码!","系统提示");
							return;
						}
					}
					var querywindow:Querywindow = new Querywindow();
					if(this.parentMother.selected){
						querywindow.d30416 = StringUtil.trim(this.d30416.text);
						querywindow.d30418 = StringUtil.trim(this.d30418.text);
					}else if(this.parentFather.selected){
						querywindow.d30422 = StringUtil.trim(this.d30416.text);
						querywindow.d30424 = StringUtil.trim(this.d30418.text);
					}
					querywindow.d30411 = this.systemUser.institutionCode;
					CompMethod.popUpTitleWindow(querywindow,this);
				}catch(error:Error){
					Alert.show("网络繁忙，请重试!","系统提示");
				}
				
			}
			
			private function readCard():void{
				try
				{
					
					var sex:String=this.parentFather.selected ?"男":"女";
					var arr:Array = CompMethod.read_card(sex);
					if(!arr)
						return ;
				
					this.d30416.text = arr[0];
					this.d30418.text = arr[5];
					query();
					
				} 
				catch(error:Error) 
				{
					Alert.show("读卡失败！");
				}
			}
			
			//与新生儿关系（读卡）
			private function readCard_A():void{
				try
				{
					var arr:Array = CompMethod.read_card(null);
					if(!arr)
						return ;
					this.d304_28.text = arr[0];//领证人姓名
					this.d304_31.text = arr[5];//领证人身份证号
					
				} 
				catch(error:Error) 
				{
					Alert.show("读卡失败！");
				}
			}
			
			//读卡获取民族信息
			private function getNationDropDownListSelectedIndex(arrayCollection:ArrayCollection, defaultValue:String):int
			{
				var len:uint = arrayCollection.length;
				var i:uint = 0;
				var index:int = 0;
				while(i < len) {
					var comboBoxDataP:Object = arrayCollection.getItemAt(i);
					if(comboBoxDataP.label == defaultValue) {
						index = arrayCollection.getItemIndex(comboBoxDataP);
						break;
					}
					i++;
				}
				return index;
			}
		]]>
	</fx:Script>
	<s:Scroller x="11" y="4" width="100%" height="100%" horizontalScrollPolicy="auto" 
				verticalScrollPolicy="auto">
		<s:VGroup>
			<mx:TabNavigator chromeColor="#ffffff" creationPolicy="all">
				<s:NavigatorContent  label="首签确认" width="1134">
					<s:HGroup id="jiazai" width="100%" height="100%" verticalAlign="middle" paddingBottom="5" paddingLeft="10" paddingRight="10">
						<s:Label text="请先查询分娩信息" paddingRight="3" styleName="mustQuery"/>
						<s:RadioButton id="parentMother" groupName="fm" label="母亲" selected="true"/>
						<s:RadioButton id="parentFather" groupName="fm" label="父亲"/>
						
						<s:Label text="请输入姓名" paddingLeft="8"/><s:TextInput id="d30416"/>
						<s:Label text="证件号码"/><s:TextInput id="d30418" width="140" />
						<s:Button label="查询" click="query()" icon="{CustomIcon.QUERY}"/>
						<s:Button label="读卡" id="duka1" click="readCard()" enabled="false" icon="{CustomIcon.READCARD}"/>
					</s:HGroup>
				</s:NavigatorContent>
			</mx:TabNavigator>
			<mx:TabNavigator chromeColor="#ffffff" creationPolicy="all">
				<s:NavigatorContent  label="分娩信息" width="1134">
					<s:VGroup paddingBottom="10" paddingLeft="10" paddingRight="10">
						<s:HGroup width="100%" paddingBottom="5" paddingLeft="10" paddingRight="10" verticalAlign="middle">
							<s:Label text="婴儿姓名"/><s:TextInput id="d304_02" width="130"/>
							<s:Label text="性　　别"/><s:DropDownList id="d304_03" width="131"/>
							<s:Label text="出生日期"/>
							<component:CustomRangeDateField id="d304_04" width="140" />
							<s:TextInput id="hour" maxChars="2" restrict="0-9" width="50"/><s:Label text="时"/>
							<s:TextInput id="minute" maxChars="2" restrict="0-9" width="50"/><s:Label text="分"/>
							<s:Label text="体重"/><s:NumericStepper  minimum="300" stepSize="0.1" maximum="10000" value="3000" id="d304_09" width="60"/><s:Label text="g"/>
							<s:Label text="身长"/><s:NumericStepper minimum="25" stepSize="0.1" maximum="75" value="50" id="d304_08" width="60"/><s:Label text="cm"/>
						</s:HGroup>
						<s:HGroup width="100%" paddingBottom="5" paddingLeft="10" paddingRight="10" verticalAlign="middle">
							<s:Label text="接生机构"/><s:DropDownList id="d304_11" width="130"/>
							<s:Label text="接  生  员"/><component:FindSelectedItemComboBox editable="true" id="d304_12" width="131" restrict="^ \f\n\r\t\v"/>
							<s:Label text="填表日期"/>
							<component:CustomRangeDateField id="d304_13" width="140" isSelectNow="true"/>
							<s:Label text="病历号"/><s:TextInput id="d304_10" restrict="^ \f\n\r\t\v"/>
							<s:Label text="出生孕周"/><s:NumericStepper id="d304_06" value="40" maximum="70" minimum="20" width="60"/>
							<s:Label text="周"/>
							<s:TextInput id="d304_07" width="40" text="0" restrict="0-7"/><s:Label text="天"/>
						</s:HGroup>
						<s:HGroup width="100%" paddingBottom="5" paddingLeft="10" paddingRight="10" verticalAlign="middle">
							<s:Label text="出生地址"/>
							<component:AreaComboBox id="d304_05" paddingBottom="10" paddingTop="5" horizontalAlign="left" areaCode="{this.parentApplication.systemUser.areaCode}"/>
						</s:HGroup>
					</s:VGroup>
				</s:NavigatorContent>
			</mx:TabNavigator>
			
			<mx:TabNavigator chromeColor="#ffffff" creationPolicy="all">
				<s:NavigatorContent label="单双亲信息" width="1134">
					<component:parents3 id="parents3" gradeVal="{gradeVal}" birthVal="{birthVal}" phoneVal="{phoneVal}" areaVal="{areaVal}" cardVal="{cardVal}" printVal="{printVal}" duka="{this.parentApplication.systemUser.duka}" fumuDuka="{this.parentApplication.systemUser.fumuDuka}" />
				</s:NavigatorContent>
			</mx:TabNavigator>  
			
			<mx:TabNavigator chromeColor="#ffffff" creationPolicy="all">
				<s:NavigatorContent label="领证人信息" width="1134">
					<s:VGroup paddingBottom="10" paddingLeft="10" paddingRight="10">
						<s:HGroup width="100%" paddingBottom="5" paddingLeft="10" paddingRight="10" verticalAlign="middle">
							<s:Label text="与新生儿关系"/><s:DropDownList id="d304_29" width="120" change="changeLicen()"/>
							<s:Label text="领证人"/><s:TextInput id="d304_28" restrict="^ \f\n\r\t\v"/>
							<s:Label text="证件类别"/><s:DropDownList id="d304_30" width="130" change="cardType_changeHandler(event)"/>
							<s:Label text="证件号码"/><s:TextInput id="d304_31" width="140" restrict="^ \f\n\r\t\v"/>
							<s:Button label="读卡" id="duka4" click="readCard_A()" enabled="false" icon="{CustomIcon.READCARD}"/>
						</s:HGroup>
					</s:VGroup>
				</s:NavigatorContent>
			</mx:TabNavigator>
			<s:HGroup contentBackgroundColor="#FF0000" verticalAlign="middle" horizontalAlign="right" paddingBottom="20" paddingTop="10" width="994" paddingRight="50" height="30">
				<s:Button label="确定" id="saveButton" click="SaveFirshBirthCertiticateDJB()"/>
			</s:HGroup>
		</s:VGroup>
	</s:Scroller>
</s:Module>