<%@ page contentType="text/html; charset=GBK" %>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<HTML>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<title>无标题文档</title>
</head>
<p>
<% 

if (request.getParameter("KeyID") != null )
{

	//获取客户端返回的唯一ID
	out.print( "<p>");
	out.print( "KeyID是：");
	out.print( request.getParameter("KeyID"));
	out.print( "</p>");

	//获取客户端返回设置在Key中的用户名
	out.print( "<p>");
	out.print( "用户名是：");
	out.print( request.getParameter("UserName"));
	out.print( "</p>");

	//获取客户端返回设置在Key中的用户登录密码
	out.print( "<p>");
	out.print( "用户登录密码是：");
	out.print( request.getParameter("Password"));
	out.print( "</p>");

	//输出当前随机数
	out.print( "<p>");
	out.print( "随机数是：");
	out.print( session.getAttribute("rnd"));
	out.print( "</p>");

	//返回用户锁对随机数的加密结果
	out.print( "<p>");
	out.print( "用户返回的对随机数进行加密结果是：");
	out.print( request.getParameter("return_EncData"));
	out.print( "</p>");


	//这里在服务器端对随机数进行同样的加密运算

	String strData,m_StrEnc,Key;
	//Key：即增强算法密钥，这个要与设置在加密锁中的密钥一致
	//增强算法密钥可以是每一把都不相同，也可以是都相同，如果是不相同的可以根据用户名在从数据库中获取对应的增强算法密钥，可以根据安全性及自身具体情况而定，这里使用了一个固定的值
	Key="DB38CF21985EB0A26F806612C0CD2E63";
	//strData：要进行加密的数据
	strData=""+session.getAttribute("rnd");
	
	out.print( "<p>");
	out.print( "服务器运算的随机数是：");
	out.print(  strData );
	out.print( "<p>");
	
	//在服务器端对数据进行加密运算
	m_StrEnc = new com.xyw.softkey.SoftKey().StrEnc(strData,Key);
	  
	out.print( "<p>");
	out.print( "服务器运算的结果是：");
	out.print(  m_StrEnc );
	out.print( "<p>");
	//比较客户端加密锁返回的加密结果与服务端的加密结果是否相符，如果相符就认为是合法用户，由于使用了随机数，从而实现了一次一密的高安全性，可以用于高安全性的身份验证
	if (m_StrEnc.trim().equals(request.getParameter("return_EncData").trim()))
	{
		out.print( "该用户是合法用户");
	}
	else
	{
		out.print( "该用户不是合法用户");
	}
	out.print( "</p>");
	out.print( "<p>");
	out.print( "<p>");
	out.print( "<p>");

}
else
{
	  int number_1=(int)(Math.random()*65535)+1;
    int number_2=(int)(Math.random()*65535)+1;
    String s_rnd= (new   Integer(number_1)).toString()+(new   Integer(number_2)).toString();
    session.setAttribute("rnd",s_rnd);

 %>
<body onload="load()" bgcolor="#FFFFFF"><!--在onload事件中处理事件插拨及检查是否已经安装了客户端服务程序-->


<script src="Syunew3.js"></script><!--定要包含有我们的UK单元包-->
<SCRIPT LANGUAGE=javascript>

var bConnect=0;
 
function load()
{
	//如果是IE10及以下浏览器，则跳过不处理
    if(navigator.userAgent.indexOf("MSIE")>0 && !navigator.userAgent.indexOf("opera") > -1) return;
    try
    {
        var s_pnp=new SoftKey3W();
         s_pnp.Socket_UK.onopen = function() 
        {
               bConnect=1;//代表已经连接，用于判断是否安装了客户端服务
        } 
        
        //在使用事件插拨时，注意，一定不要关掉Sockey，否则无法监测事件插拨
        s_pnp.Socket_UK.onmessage =function got_packet(Msg) 
        {
            var PnpData = JSON.parse(Msg.data);
            if(PnpData.type=="PnpEvent")//如果是插拨事件处理消息
            {
                if(PnpData.IsIn) 
                {
                        alert("UKEY已被插入，被插入的锁的路径是："+PnpData.DevicePath);
                }
                else
                {
                        alert("UKEY已被拨出，被拨出的锁的路径是："+PnpData.DevicePath);
                }
            }
        } 
        
        s_pnp.Socket_UK.onclose = function()
        {
            
        }
   }
   catch(e)  
   {  
        alert(e.name + ": " + e.message);
        return false;
    }  
}

 var digitArray = new Array('0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f');

function toHex( n ) {

        var result = ''
        var start = true;

        for ( var i=32; i>0; ) {
                i -= 4;
                var digit = ( n >> i ) & 0xf;

                if (!start || digit != 0) {
                        start = false;
                        result += digitArray[digit];
                }
        }

        return ( result == '' ? '0' : result );
}

function login_onclick() 
{
	//如果是IE10及以下浏览器，则使用AVCTIVEX控件的方式
	if(navigator.userAgent.indexOf("MSIE")>0 && !navigator.userAgent.indexOf("opera") > -1) return Handle_IE10();
	
   //判断是否安装了服务程序，如果没有安装提示用户安装
    if(bConnect==0)
    {
        window.alert ( "未能连接服务程序，请确定服务程序是否安装。");return false;
    }
    
   	var DevicePath,ret,n,mylen,ID_1,ID_2,addr;
	try
	{
			
		 //由于是使用事件消息的方式与服务程序进行通讯，
		    //好处是不用安装插件，不分系统及版本，控件也不会被拦截，同时安装服务程序后，可以立即使用，不用重启浏览器
		    //不好的地方，就是但写代码会复杂一些
			var s_simnew1=new SoftKey3W(); //创建UK类
			
		    s_simnew1.Socket_UK.onopen = function() {
		   	   s_simnew1.ResetOrder();//这里调用ResetOrder将计数清零，这样，消息处理处就会收到0序号的消息，通过计数及序号的方式，从而生产流程
		    } 

           
		 //写代码时一定要注意，每调用我们的一个UKEY函数，就会生产一个计数，即增加一个序号，较好的逻辑是一个序号的消息处理中，只调用我们一个UKEY的函数
	    s_simnew1.Socket_UK.onmessage =function got_packet(Msg) 
	    {
	        var UK_Data = JSON.parse(Msg.data);
	        alert(Msg.data);
	        if(UK_Data.type!="Process")return ;//如果不是流程处理消息，则跳过
	        switch(UK_Data.order) 
	        {
	            case 0:
	                {
	                    s_simnew1.FindPort(0);//发送命令取UK的路径
	                }
	                break;//!!!!!重要提示，如果在调试中，发现代码不对，一定要注意，是不是少了break,这个少了是很常见的错误
	            case 1:
	                {
	                    if( UK_Data.LastError!=0){window.alert ( "未发现加密锁，请插入加密锁");s_simnew1.Socket_UK.close();return false;} 
	                    DevicePath=UK_Data.return_value;//获得返回的UK的路径
	                    s_simnew1.GetID_1(DevicePath); //发送命令取ID_1
	                }
	                break;
	            case 2:
	                {
	                    if( UK_Data.LastError!=0){ window.alert("返回ID号错误，错误码为："+UK_Data.LastError.toString());s_simnew1.Socket_UK.close();return false;} 
	                    ID_1=UK_Data.return_value;//获得返回的UK的ID_1
	                    s_simnew1.GetID_2(DevicePath); //发送命令取ID_2
	                }
	                break;
	             case 3:
	                {
	                    if( UK_Data.LastError!=0){ window.alert("取得ID错误，错误码为："+UK_Data.LastError.toString());s_simnew1.Socket_UK.close();return false;} 
	                     ID_2=UK_Data.return_value;//获得返回的UK的ID_2
	                     
	                     frmlogin.KeyID.value=toHex(ID_1)+toHex(ID_2);
	                     
	                     s_simnew1.ContinueOrder();//为了方便阅读，这里调用了一句继续下一行的计算的命令，因为在这个消息中没有调用我们的函数，所以要调用这个
	                }
	                break;
	             case 4:
	                {
	                    //获取设置在锁中的用户名
			            //先从地址0读取字符串的长度,使用默认的读密码"FFFFFFFF","FFFFFFFF"
			            addr=0;
			            s_simnew1.YReadEx(addr,1,"ffffffff","ffffffff",DevicePath);//发送命令取UK地址0的数据
	                }
	                break;
	            case 5:
	                {
	                    if( UK_Data.LastError!=0){ window.alert("读数据时错误，错误码为："+UK_Data.LastError.toString());s_simnew1.Socket_UK.close();return false;} 
	                    s_simnew1.GetBuf(0);//发送命令从数据缓冲区中数据
	                }
	                break;
	            case 6:
	                {
	                    if( UK_Data.LastError!=0){ window.alert("调用GetBuf时错误，错误码为："+UK_Data.LastError.toString());s_simnew1.Socket_UK.close();return false;} 
	                    mylen=UK_Data.return_value;//获得返回的数据缓冲区中数据
	                    
	                    //再从地址1读取相应的长度的字符串，,使用默认的读密码"FFFFFFFF","FFFFFFFF"
	                    addr=1;
	                    s_simnew1.YReadString(addr,mylen, "ffffffff", "ffffffff", DevicePath);//发送命令从UK地址1中取字符串
	                }
	                break;
	            case 7:
	                {
	                    if( UK_Data.LastError!=0){ window.alert("读取字符串时错误，错误码为："+UK_Data.LastError.toString());s_simnew1.Socket_UK.close();return false;} 
	                    frmlogin.UserName.value=UK_Data.return_value;//获得返回的UK地址1的字符串
	                    
	                    //获到设置在锁中的用户密码,
			            //先从地址20读取字符串的长度,使用默认的读密码"FFFFFFFF","FFFFFFFF"
			            addr=20;
			            s_simnew1.YReadEx(addr,1,"ffffffff","ffffffff",DevicePath);//发送命令取UK地址20的数据
	                }
	                break;
	            case 8:
	                {
	                    if( UK_Data.LastError!=0){ window.alert("读数据时错误，错误码为："+UK_Data.LastError.toString());s_simnew1.Socket_UK.close();return false;} 
	                    s_simnew1.GetBuf(0);//发送命令从数据缓冲区中数据
	                }
	                break;
	            case 9:
	                {
	                    if( UK_Data.LastError!=0){ window.alert("调用GetBuf时错误，错误码为："+UK_Data.LastError.toString());s_simnew1.Socket_UK.close();return false;} 
	                    mylen=UK_Data.return_value;//获得返回的数据缓冲区中数据
	                    
	                    //再从地址21读取相应的长度的字符串，,使用默认的读密码"FFFFFFFF","FFFFFFFF"
	                    addr=21;
	                    s_simnew1.YReadString(addr,mylen,"ffffffff", "ffffffff", DevicePath);//发送命令从UK地址21中取字符串
	                }
	                break;
	             case 10:
	                {
	                    if( UK_Data.LastError!=0){ window.alert("读取字符串时错误，错误码为："+UK_Data.LastError.toString());s_simnew1.Socket_UK.close();return false;} 
	                    frmlogin.Password.value=UK_Data.return_value;//获得返回的UK中地址21的字符串
	                    
	                    //这里返回对随机数的HASH结果
	                    s_simnew1.EncString(frmlogin.rnd.value,DevicePath);//发送命令让UK进行加密操作
	                    
	                }
	                break;
	             case 11:
	                {
	                    if( UK_Data.LastError!=0){ window.alert("进行加密运行算时错误，错误码为："+UK_Data.LastError.toString());s_simnew1.Socket_UK.close();return false;} 
	                    frmlogin.return_EncData.value=UK_Data.return_value;//获得返回的加密后的字符串
	                     
	                     //!!!!!注意，这里一定要主动提交，
                        frmlogin.submit (); 
 
	                     //所有工作处理完成后，关掉Socket
	                     s_simnew1.Socket_UK.close();
	                }
	                break;
            }
	    } 
	    s_simnew1.Socket_UK.onclose = function(){

	    }
		return true;
	}
	catch (e) 
	{
		alert(e.name + ": " + e.message);
	}

}

function Handle_IE10() 
{
	var DevicePath,ret,n,mylen;
	try
	{
	
		//建立操作我们的锁的控件对象，用于操作我们的锁
        var s_simnew1;
	    //创建控件

		s_simnew1=new ActiveXObject("Syunew3A.s_simnew3");

        
        //查找是否存在锁,这里使用了FindPort函数
		DevicePath = s_simnew1.FindPort(0);
		console.log(DevicePath)
		if( s_simnew1.LastError!= 0 )
		{
			window.alert ( "未发现加密锁，请插入加密锁。");
			
			return false;
		}
		
		 //'读取锁的ID
        frmlogin.KeyID.value=toHex(s_simnew1.GetID_1(DevicePath))+toHex(s_simnew1.GetID_2(DevicePath));
        if( s_simnew1.LastError!= 0 )
		{
            window.alert( "返回ID号错误，错误码为："+s_simnew1.LastError.toString());
	        return false;
		}
		
		//获取设置在锁中的用户名
		//先从地址0读取字符串的长度,使用默认的读密码"FFFFFFFF","FFFFFFFF"
		ret=s_simnew1.YReadEx(0,1,"ffffffff","ffffffff",DevicePath);
		mylen =s_simnew1.GetBuf(0);
		//再从地址1读取相应的长度的字符串，,使用默认的读密码"FFFFFFFF","FFFFFFFF"
		frmlogin.UserName.value=s_simnew1.YReadString(1,mylen, "ffffffff", "ffffffff", DevicePath);
		if( s_simnew1.LastError!= 0 )
		{
			window.alert(  "读取用户名时错误，错误码为："+s_simnew1.LastError.toString());
			return false;
		}

		//获到设置在锁中的用户密码,
		//先从地址20读取字符串的长度,使用默认的读密码"FFFFFFFF","FFFFFFFF"
		ret=s_simnew1.YReadEx(20,1,"ffffffff","ffffffff",DevicePath);
		mylen =s_simnew1.GetBuf(0);
		//再从地址21读取相应的长度的字符串，,使用默认的读密码"FFFFFFFF","FFFFFFFF"
		frmlogin.Password.value=s_simnew1.YReadString(21,mylen,"ffffffff", "ffffffff", DevicePath);
		if( s_simnew1.LastError!= 0 )
		{
			window.alert( "读取用户密码时错误，错误码为："+s_simnew1.LastError.toString());
			return false;
		}

		//这里返回对随机数的HASH结果
		frmlogin.return_EncData.value=s_simnew1.EncString(frmlogin.rnd.value,DevicePath);
		if( s_simnew1.LastError!= 0 )
		{
				window.alert( "进行加密运行算时错误，错误码为："+s_simnew1.LastError.toString());
				return false;
		}
		frmlogin.submit();	
		
		return ;

	}
	catch (e) 
	{
		alert(e.name + ": " + e.message+"。可能是没有安装相应的控件或插件");
	}
}

</SCRIPT>
 
 
 <form name="frmlogin" method="post" action="auth1.jsp">
     <div>
        <br />
        <br />
        要测试的话，无需输入任何数据，直接点提交就可以自动获到锁的信息<br />
        <br />
<input name="KeyID" type="text" id="KeyID" size="20" />
<input name="UserName" type="text" id="UserName" size="20" />
<input name="Password" type="text" id="Password" size="20" /> 
<input name="rnd" type="text" id="rnd" value="<%=session.getAttribute("rnd") %>" />
<input name="return_EncData" type="text" id="return_EncData" value=""   />
<!--/重要，这里的类型一定不能是Submit，否则无法完全处理所有的消息，就提交上去了，一定要主动提交-->
<input type="button" name="Submit" value="提交" onclick="login_onclick()"/>
</form>
</BODY>
</HTML>
<%
}
%>
