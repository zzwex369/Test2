<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   width="325" height="550" chromeColor="#429edd"
			   fontSize="15" title="角色权限分配"
			   close="removeAddRoleTitleWindow()"
			   skinClass="com.xyw.sys.custom.skin.CustomTitleWindow"
			   xmlns:component="com.xyw.sys.custom.component.*"
			   creationComplete="titlewindowCreationCompleteHandler(event)">
	
	<fx:Declarations>
		<s:RemoteObject id="systemService" destination="systemService" endpoint="{this.parentApplication.contextRoot}/messagebroker/amf" showBusyCursor="true">
			<s:method name="getRolePrivilege" result="getRolePrivilegeHandler(event)"/>
			<s:method name="addPrivilegeToRole" result="addPrivilegeToRoleHandler(event)"/>
		</s:RemoteObject>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.xyw.sys.custom.itemrenderer.CustomCheckBoxTreeItemRender;
			import com.xyw.sys.model.D805;
			import com.xyw.sys.model.RolePrivilegeRequest;
			import com.xyw.sys.model.RolePrivilegeResponse;
			import com.xyw.sys.model.SystemUser;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.events.TreeEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			[Bindable]
			public var d804_01:int;
			
			public var systemUser:SystemUser = null;

			private function titlewindowCreationCompleteHandler(event:FlexEvent):void
			{
				this.systemUser = this.parentApplication.systemUser;
				var rolePrivilegeRequest:RolePrivilegeRequest = new RolePrivilegeRequest();
				rolePrivilegeRequest.d804_01 = this.d804_01;
				this.systemService.getRolePrivilege(rolePrivilegeRequest);
			}				
				
			private function removeAddRoleTitleWindow():void
			{
				PopUpManager.removePopUp(this);
			}
			
			private function addPrivilegeToRoleHandler(event:ResultEvent):void
			{
				var result:Boolean = event.result as Boolean;
				if(!result) {
					Alert.show("授权失败!", "系统提示");
					return;
				}
			}
			
			private function getRolePrivilegeHandler(event:ResultEvent):void
			{
				var rolePrivilegeResponse:RolePrivilegeResponse = event.result as RolePrivilegeResponse;
				var xmlMenuString:String = rolePrivilegeResponse.xmlMenuString;
				var xml:XML = new XML(xmlMenuString);
				this.customCheckBoxTree.dataProvider = xml;
				this.updateChecked(xml);
			}
			
			private function confirm():void
			{
				var d805:D805 = new D805();
				d805.d805_02 = this.d804_01;
				var result:String = this.getSelectedChild(new XML(XMLList(this.customCheckBoxTree.dataProvider)[0]));
				var ac:ArrayCollection = new ArrayCollection(result.substr(0, result.length - 1).split(","));
				d805.d805_03s = ac;
				this.systemService.addPrivilegeToRole(d805);
				this.removeAddRoleTitleWindow();
			}
			
			private function apply():void
			{
				var d805:D805 = new D805();
				d805.d805_02 = this.d804_01;
				 //Alert.show(this.customCheckBoxTree.dataProvider.toString(), "DP");
				var result:String = this.getSelectedChild(new XML(XMLList(this.customCheckBoxTree.dataProvider)[0]));
				var ac:ArrayCollection = new ArrayCollection(result.substr(0, result.length - 1).split(","));
				d805.d805_03s = ac;
				this.systemService.addPrivilegeToRole(d805);
			}
			/**
			 * Called on checkbox click
			 * check and update for both parents and child nodes
			 * according to the checkbox status
			 */
			private function onItemCheck( event: TreeEvent ): void
			{
				updateParents( event.item as XML, ( event.itemRenderer as CustomCheckBoxTreeItemRender ).checkBox.checkState );
				updateChilds( event.item as XML, ( event.itemRenderer as CustomCheckBoxTreeItemRender ).checkBox.checkState );
			}
			
			/**
			 * @see it.sephiroth.controls.CheckBoxExtended#checkState
			 * 
			 */
			private function updateChilds( item:XML, value: uint ):void
			{
				var middle: Boolean = ( value & 2 << 1 ) == ( 2 << 1 );
				var selected: Boolean = ( value & 1 << 1 ) == ( 1 << 1 );
				
				if( item.children( ).length( ) > 0 && !middle )
				{
					for each(var x: XML in item.menuitem )
					{
						x.@checked = value == ( 1 << 1 | 2 << 1 ) ? "2" : value == ( 1 << 1 ) ? "1" : "0";
						updateChilds( x, value );
					}
				}
			}
			
			private function updateParents( item: XML, value: uint ): void
			{
				var checkValue: String = ( value == ( 1 << 1 | 2 << 1 ) ? "2" : value == ( 1 << 1 ) ? "1" : "0" );
				var parentNode: XML = item.parent( );
				if( parentNode )
				{
					for each(var x: XML in parentNode.menuitem )
					{
						if( x.@checked != checkValue )
						{
							checkValue = "2"
						}
					}
					parentNode.@checked = checkValue;
					updateParents( parentNode, value );
				}
			}
			
			private function updateChecked(xml:XML):void
			{
				var j:int = 0;
				var k:int = 0;
				var lenP:int = xml.children().length();
				for(var i:int = 0; i < lenP;i++) {
					
					var xmlC:XML = xml.children()[i];
					var len:int = xmlC.children().length();
					if(len > 0) {
						updateChecked(xmlC);
					} else {
						if(xmlC.@checked == '1') {
							//xmlC.parent().@checked = '1';
							j++;
						} else if(xmlC.@checked == '0') {
							k++;
						}
					}
				}
				
				if(j == lenP) {
					xmlC.parent().@checked = '1';
				} else if (k == lenP) {
					xmlC.parent().@checked = '0';
				} else {
					xmlC.parent().@checked = '2';
				}
			}
			
			private function getSelectedChild(xml:XML):String{
				var result:String="";
				for(var i:int = 0; i < xml.children().length(); i++){
					if((xml.children()[i].@checked=="1") || (xml.children()[i].@checked=="2" && xml.children()[i].@leaf=="0")){
						result+=xml.children()[i].@data+",";
					}
					var oxml:XML=new XML(xml.children()[i].toString());
					if(oxml.children().length() > 0){
						result+=getSelectedChild(oxml);
					}
				}
				return result;
			}
			
			private function valueT():void
			{
				
			}
			
			private function customCheckBoxTreeItemClickHandler(event:ListEvent):void
			{
				var item:Object = CustomCheckBoxTree(event.target).selectedItem;
				var leaf:String = item.@leaf;
				
				if(leaf == "0") {
					this.customCheckBoxTree.openItems = [];
					this.customCheckBoxTree.expandChildrenOf(item, true);
				}
			}
			
		]]>
	</fx:Script>
	
	<s:VGroup width="100%" height="100%" paddingBottom="10" paddingLeft="10" paddingTop="10" paddingRight="10" chromeColor="#FFFFFF">
		<component:CustomCheckBoxTree id="customCheckBoxTree" showRoot="false"
									  width="100%"
									  height="100%"
									  
									  labelField="@label"
									  checkField="@checked"
									  itemCheck="onItemCheck(event)"
									  itemClick="customCheckBoxTreeItemClickHandler(event)"/>
		<s:HGroup width="100%" horizontalAlign="right">
			<s:Button label="确定" click="confirm()"/><s:Button label="应用" click="apply()"/><s:Button label="取消" click="removeAddRoleTitleWindow()"/>
		</s:HGroup>
	</s:VGroup>
</s:TitleWindow>