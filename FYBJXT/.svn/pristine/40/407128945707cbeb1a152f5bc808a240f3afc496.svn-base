<?xml version="1.0" encoding="utf-8"?>
<s:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" xmlns:component="com.xyw.sys.custom.component.*" creationComplete="moduleCreationCompleteHandler(event)">
	<fx:Declarations>
		<s:RemoteObject id="e703Service" destination="e703Service" endpoint="{this.parentApplication.contextRoot}/messagebroker/amf" showBusyCursor="true">
			<s:method name="queryE703"  result="queryE703Handler(event)"/>
			<s:method name="deleteE703"  result="deleteE703Handler(event)"/>
		</s:RemoteObject>
	</fx:Declarations>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		mx|GridItem
		{
			horizontalAlign:left;
			verticalAlign:middle;
		}
		s|TextInput
		{
			fontFamily:微软雅黑;
		}
		
		s|DropDownList
		{
			skinClass:ClassReference("com.xyw.sys.custom.skin.CustomDropDownListSkin");
			selectionColor:#DDDDDD;
			rollOverColor:#EEEEEE;	
		}
		s|Button
		{
			skinClass:ClassReference("com.xyw.sys.custom.skin.CustomButtonSkin");
		}
		s|Label
		{
			fontSize:13;
		}
		s|ComboBox{
			skinClass:ClassReference("com.xyw.sys.custom.skin.CustomComboBoxSkin");
			
		}
		s|DataGrid
		{
			borderAlpha:"0.3";
			skinClass:ClassReference("com.xyw.sys.custom.skin.CustomDataGridSkin");
			alternatingRowColors:"[#FFFFFF,#EEEEEE]";
		}
		
		s|TextInput:normalWithPrompt {
			color: #D60505;
			fontStyle:normal;
		}
		mx|ToolTip
		{
			fontSize:15;  
			color:#FF6699; 
		}
		
	</fx:Style>
	<fx:Script>
		<![CDATA[
			import com.xyw.module.etbj.etsl.model.E703;
			import com.xyw.module.etbj.etsl.model.E703Request;
			import com.xyw.sys.custom.component.CompMethod;
			import com.xyw.sys.custom.component.CustomIcon;
			import com.xyw.sys.model.SystemUser;
			
			import mx.controls.Alert;
			import mx.controls.DateField;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.StringUtil;
			import spark.events.GridSelectionEvent;
			[Bindable]
			private var systemUser:SystemUser =null;
			private var ve701:Object;
			private var e703Request:E703Request;
			public var ve703:Object;
			
			private function moduleCreationCompleteHandler(event:FlexEvent):void
			{
				
				this.systemUser = this.parentApplication.systemUser;
			}
			private function query():void{
				e703Request = new E703Request();
				this.initQueryParam();
				e703Request.parameterPageindex = 1;
				e703Request.parameterPagesize = 20;
				this.e703Service.queryE703(e703Request);
			}
			private function initQueryParam():void
			{
				var type:String = this.jigou.getLastSelectedInstitution();
				var jigou_:String = this.jigou.getLastSelectedInstitutionCode();
				
				e703Request.jigou = (type == "10")?jigou_:jigou_.substring(0,Number(type));
				e703Request.parent_idcard=StringUtil.trim(this.parent_idcard.text);
				e703Request.parent_name=StringUtil.trim(this.parent_name.text);
				e703Request.parent_phone=StringUtil.trim(this.parent_phone.text);
				var e703:E703 = new E703();
				e703.e70305=StringUtil.trim(this.e703_05.text);
				e703.e70308=StringUtil.trim(this.e703_08.text);
				e703Request.e703=e703;
				if(e703Request.parent_idcard!=""||e703Request.parent_name!=""||e703Request.parent_phone!=""||e703.e70305!=""||e703.e70308!=""){
					return;
				}
				e703Request.e70318_str=DateField.stringToDate(timeStart.text,'YYYY-MM-DD');
				e703Request.e70318_end=DateField.stringToDate(timeEnd.text,'YYYY-MM-DD');
			}
			private function queryE703Handler(event:ResultEvent):void{
				var e703Response:Object = event.result;
				var rowCount:Number = e703Response.rowCount;
				if(e703Response.falg){
					this.pagerBar.dataGrid = this.certificateDataGrid;
					this.pagerBar.rowCount = rowCount;
					this.pagerBar.resultData = e703Response.ve703s;
					this.pagerBar.dataBind();
					this.pagerBar.pagerFunction = pagerFunction;
					if(rowCount > 0) {
						this.pagerBar.enabled = true;
					}
					this.certificateDataGrid.dataProvider = e703Response.ve703s;
					this.ve703 = null;
				}else{
					
					Alert.show("请稍后重试","系统提示");
				}
			}
			private function onSelected(event:GridSelectionEvent):void
			{
				this.ve703 = DataGrid(event.target).selectedItem;
			}
			private function delet(event:Event):void{
				if(this.ve703 == null){  
					Alert.show("请选择要操作的行");
					return;
				}
				if(ve703.e70316!=systemUser.institutionCode){
					Alert.show("不是本机构录入的信息,不能删除","系统提示");
					return;
				}
				if(ve703.e70325=="1"){
					Alert.show("已接诊,不能删除","系统提示");
					return;
				}
				Alert.yesLabel = '是'; 
				Alert.noLabel = '否';
				Alert.show('确认删除信息？','删除登记信息',1|2,this,deleteValidate);
			}
			protected function deleteValidate(event:CloseEvent):void
			{
				if(event.detail == Alert.YES){
					e703Request = new E703Request();
					e703Request.zhujian=ve703.e70301;
					var e703:E703=new E703();
					e703.e70302=ve703.e70302;
					e703.e70303=ve703.e70303;
					e703Request.e703=e703;
					this.e703Service.deleteE703(e703Request);
				}
			}
			private function deleteE703Handler(event:ResultEvent):void{
				var e703Response:Object = event.result;
				if(e703Response.falg){
					Alert.show("删除成功", "系统提示");
					refresh();
					this.ve703 = null;
				}else{
					Alert.show("请稍后重试","系统提示");
				}
			}
			
			private function update(event:Event):void{
				if(this.ve703 == null){
					Alert.show("请选择要操作的行！","系统提示");
					return;
				}
				if(ve703.e70316!=systemUser.institutionCode){
					Alert.show("不是本机构录入的信息,不能修改","系统提示");
					return;
				}
				var window:title = new title();
				window.ve703 = this.ve703;
				CompMethod.popUpTitleWindow(window,this,true);
				window.addEventListener("ok_click",refresh1);
				
			}
			public function refresh1(event:Event):void{
				this.ve701=null;
				refresh();
			}
			public function refresh():void
			{
				e703Request = new E703Request();
				this.initQueryParam();
				e703Request.parameterPageindex = this.pagerBar.currentPageIndex;
				e703Request.parameterPagesize = 20;
				this.e703Service.queryE703(e703Request);
			}
			private function pagerFunction(currentPageIndex:int, pageSize:int):void
			{
				e703Request=new E703Request();
				this.initQueryParam();
				e703Request.parameterPageindex = currentPageIndex;
				e703Request.parameterPagesize = pageSize;
				this.e703Service.queryE703(e703Request);
			}
			protected function readCard_B1(event:MouseEvent):void
			{
				try
				{
					//readCard是调用index.js下的函数，读卡涉及index.jsp和index.js两个文件
					var str:String = ExternalInterface.call("parent.readCard");
					if(str != null && str.length != 0){
						
						var array:Array = str.split(",");
						var sex:String = array[1];//性别
						
						this.e703_05.text = array[0];//姓名
						this.e703_08.text = array[5];//身份证号
						
					}else{
						Alert.show("读卡失败！");
					}
				} 
				catch(error:Error) 
				{
					Alert.show("读卡失败！");
				}
			}
			protected function readCard_B2(event:MouseEvent):void
			{
				try
				{
					//readCard是调用index.js下的函数，读卡涉及index.jsp和index.js两个文件
					var str:String = ExternalInterface.call("parent.readCard");
					if(str != null && str.length != 0){
						
						var array:Array = str.split(",");
						var sex:String = array[1];//性别
						
						this.parent_name.text = array[0];//姓名
						this.parent_idcard.text = array[5];//身份证号
						
					}else{
						Alert.show("读卡失败！");
					}
				} 
				catch(error:Error) 
				{
					Alert.show("读卡失败！");
				}
			}
			private function print(event:Event):void{
				if(ve703==null)
				{
					Alert.show("请选择转诊信息","系统提示");
					return;
				}
				var urlRequest:URLRequest = new URLRequest();
				var variables:URLVariables = new URLVariables();
				urlRequest.data = variables;
				variables.e70301=encodeURIComponent(ve703.e70301);
				urlRequest.method = URLRequestMethod.POST;
				urlRequest.url = this.parentApplication.contextRoot +
					"/print_new/etbj/etsl/etybjjsljczzddy.jsp";
				navigateToURL(urlRequest);
			}
			private function setStringage(item:Object, column:GridColumn):String
			{
				var str:String=item[column.dataField];
				var num:Number=new Number(str);
				if(num<1){
					num *= 4;
					return num+"周";
				}else if(num<12){
					return num+"月";
				}else{
					num = num/12;
					return num+"岁";
				}
			}
		]]>
	</fx:Script>
	<s:Scroller x="-6" y="1" width="100%" height="100%" horizontalScrollPolicy="auto" verticalScrollPolicy="auto">
		<s:VGroup paddingBottom="20" paddingLeft="10" paddingRight="10" paddingTop="10">
			<mx:TabNavigator  width="1155" chromeColor="#ffffff" creationPolicy="all" height="148">
				<s:NavigatorContent width="100%" label="查询" >		
					<s:VGroup width="1155" height="109" paddingBottom="2" paddingLeft="4"
							  paddingRight="10">	
						<s:HGroup width="100%" paddingBottom="0" paddingLeft="2" paddingRight="10"
								  verticalAlign="middle">
							<s:Label text="录入机构"/>
							<component:InstitutionComboBox id="jigou"  width="942" villageVisible="true"/>
						</s:HGroup>
						<s:HGroup verticalAlign="middle">
							<s:Label text="儿童姓名" paddingLeft="2"/><s:TextInput id="e703_05"/>
							<s:Label text="证件号码" /><s:TextInput id="e703_08" width="153"/>
							<s:Button buttonMode="true" label="读卡" id="duka1" enabled="{systemUser.duka=='1'}" click="readCard_B1(event)" icon="{CustomIcon.READCARD}"/>
						</s:HGroup>
						
						
						<s:HGroup verticalAlign="middle">
							<s:Label text="家长姓名" paddingLeft="2"/><s:TextInput id="parent_name"/>
							<s:Label text="证件号码" /><s:TextInput id="parent_idcard" width="153"/>
							<s:Label text="手机号码" /><s:TextInput id="parent_phone" width="140" />
							<s:Button buttonMode="true" label="读卡" id="duka2" enabled="{systemUser.duka=='1'}" click="readCard_B2(event)" icon="{CustomIcon.READCARD}"/>
						</s:HGroup>
						<s:HGroup>
							<s:Label text="录入日期"
									 paddingLeft="2" paddingTop="5"/>
							<component:CustomRangeDateField  id="timeStart" isSelectFirst="true" width="120"/>
							<s:Label text="至"
									 paddingTop="5"/>
							<component:CustomRangeDateField  id="timeEnd" width="120" isSelectNow="true"/>
							<s:Button buttonMode="true" click="query()" label="查询" icon="{CustomIcon.QUERY}"/>	
							<s:Button buttonMode="true" click="update(event)" label="修改" icon="{CustomIcon.MODYFY}"/>	
							<s:Button buttonMode="true" click="delet(event)" label="删除" icon="{CustomIcon.DEL}"/>	
							<s:Button buttonMode="true" click="print(event)" label="打印转诊" icon="{CustomIcon.PRINTER}"/>	
						</s:HGroup>
					</s:VGroup>
				</s:NavigatorContent>
			</mx:TabNavigator>
			<s:VGroup id="vgroupDataGrid" height="381" paddingRight="5"  width="1155">
				<s:DataGrid id="certificateDataGrid" height="328"
							alternatingRowColors="[#FFFFFF,#EEEEEE]" editable="false"
							rowHeight="22" selectionChange="onSelected(event)"
							width="1155">
					<s:columns>
						<s:ArrayList>
							<s:GridColumn width="40" editable="false" headerText="序号" itemRenderer="com.xyw.sys.custom.itemrenderer.CustomGridColumnItemRenderer"/>
							<s:GridColumn width="70" dataField="e70305" headerText="儿童姓名"/>
							<s:GridColumn width="40" dataField="e70306_zh" headerText="性别"/>
							<s:GridColumn width="40" dataField="e70307" headerText="年龄" labelFunction="setStringage"/>
							<s:GridColumn width="140" dataField="e70308" headerText="身份证号"/>
							<s:GridColumn width="80" dataField="e70309" headerText="母亲姓名"/>
							<s:GridColumn width="140" dataField="e70310" headerText="母亲身份证号"/>
							<s:GridColumn width="80" dataField="e70311" headerText="父亲姓名"/>
							<s:GridColumn width="140" dataField="e70312" headerText="父亲身份证号"/>
							<s:GridColumn width="100" dataField="e70313" headerText="联系方式"/>
							<s:GridColumn width="80" dataField="e70317" headerText="转诊人"/>
							<s:GridColumn dataField="e70316_zh" headerText="转出单位"/>
						</s:ArrayList>
					</s:columns>
				</s:DataGrid>					
				<component:PagerBar id="pagerBar" enabled="false" isExcel="false" isExcel2="false" isPrinter="false"/>
			</s:VGroup>
		</s:VGroup>
	</s:Scroller>
</s:Module>
