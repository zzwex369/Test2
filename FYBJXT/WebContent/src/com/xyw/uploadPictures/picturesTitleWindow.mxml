<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns="spark.components.*"
			   skinClass="com.xyw.sys.custom.skin.CustomTitleWindow"
			   backgroundColor="#C0C0C0" chromeColor="#5CACEE"
			   width="686" height="650" fontFamily="微软雅黑"
			   cornerRadius="5"
			   close="closeTitleWindow()"
			   creationComplete="init()"
			   title="图片">
	<fx:Declarations>
		<s:RemoteObject id="pictureService" destination="pictureService"
						endpoint="{this.parentApplication.contextRoot}/messagebroker/amf"
		 showBusyCursor="true">
			<s:method fault="saveImage_result(event)" name="saveImage"
					  result="resultSaveImage(event)"/>
		</s:RemoteObject>
	</fx:Declarations>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";	
		s|Button
		{
			skinClass:ClassReference("com.xyw.sys.custom.skin.CustomButtonSkin");
		}
	</fx:Style>
	
	<fx:Script>
		<![CDATA[	
			import com.xyw.supervise.division.model.D302;
			import com.xyw.sys.model.SystemUser;
			import com.xyw.uploadPictures.model.Pictures;
			import com.xyw.uploadPictures.model.PictureMessage;
			
			import flash.display.Sprite;
			import flash.events.*;
			import flash.net.FileFilter;
			import flash.net.FileReference;
			import flash.net.URLRequest;
			
			import mx.accessibility.DateFieldAccImpl;
			import mx.controls.Alert;
			import mx.controls.Image;
			import mx.events.CloseEvent;
			import mx.events.EffectEvent;
			import mx.managers.CursorManager;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import org.hamcrest.object.nullValue;	
			private var fileReference:FileReference;
			private var byteArray:ByteArray;   
			private var bitmapData:BitmapData;   
			private var loader:Loader; 
			private var imageMessage:PictureMessage=new PictureMessage();
			private var image:Pictures=new Pictures();
			private var winDIVTitle:String = "图片加载至内存显示预览"; 
			public var pic08:String;
			public var pic09:String;
			public var pic10:String;
			public var pic02:Number;
			public var oldx:Number;
			public var oldy:Number;
			public var systemUser:SystemUser =null;
			/**
			 * @author libo
			 * 创建时间：Feb 3, 2017 7:26:47 PM
			 * 
			 *关闭弹出窗口
			 * 
			 */
			private function closeTitleWindow():void
			{	
				PopUpManager.removePopUp(this);
				/* outerDocument.openFileId.enabled="true";  */
			}
			/*------------初始化----------------------*/
			public function init():void {	
				this.setFocus();
				loader = new Loader(); 
				upLoad.enabled=false;
				fileReference = new FileReference();
				configureListeners(fileReference);
				this.systemUser = this.parentApplication.systemUser;
				this.addEventListener(KeyboardEvent.KEY_DOWN,KeyboardListener);
				//注册JS回调,js调用flex
				//ExternalInterface.addCallback("OnFileChange",getSourcePathHandler);
			}
			/* private function getSourcePathHandler(path:String):void{
				Alert.show(path);
				img.source = path;
			} */
			private function configureListeners(dispatcher:IEventDispatcher):void {
				dispatcher.addEventListener(Event.CANCEL, cancelHandler);
				dispatcher.addEventListener(Event.COMPLETE, completeHandler);
				dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);
				dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
				dispatcher.addEventListener(Event.OPEN, openHandler);
				dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
				dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
				dispatcher.addEventListener(Event.SELECT, selectHandler);
				dispatcher.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA,uploadCompleteDataHandler);
			}
			/*图片类型*/
			private function getTypes():Array {
				var allTypes:Array = new Array(getImageTypeFilter());
				return allTypes;
			}
			
			private function getImageTypeFilter():FileFilter {
				return new FileFilter("图片 (*.jpg, *.jpeg, *.gif, *.png)", "*.jpg;*.jpeg;*.gif;*.png");
			}
			
			
			private function cancelHandler(event:Event):void {
				trace("cancelHandler: " + event);
			}
			
			/***
			 * 加载选择的图片
			 * */
			private function completeHandler(event:Event):void
			{
				trace("completeHandler: " + event);
				byteArray = fileReference.data;   
				loader.contentLoaderInfo.addEventListener(Event.COMPLETE,loaderCompleteHandler);   
				loader.loadBytes(byteArray);
			}
			/*预览图片并让图片自适应*/
			private function loaderCompleteHandler(e:Event):void   
			{   //得到图片
				var bitmap:Bitmap = Bitmap(loader.content);   
				bitmapData = bitmap.bitmapData;
				img.source = new Bitmap(bitmapData,"auto",true);
				/***矫正图片 让图片自动适应容器***/
				imgLoadFinish(e);
			}   
			
			private function uploadCompleteDataHandler(event:DataEvent):void {
				trace("uploadCompleteData: " + event);
				img.addEventListener(Event.COMPLETE, imgLoadFinish);
				
			}

			private function httpStatusHandler(event:HTTPStatusEvent):void {
				trace("httpStatusHandler: " + event);
			}
			
			private function ioErrorHandler(event:IOErrorEvent):void {
				trace("ioErrorHandler: " + event);
			}
			
			private function openHandler(event:Event):void {
				trace("openHandler: " + event);
			}
			
			private function progressHandler(event:ProgressEvent):void {
				var file:FileReference = FileReference(event.target);
				trace("progressHandler name=" + file.name + " bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);
			}
			
			private function securityErrorHandler(event:SecurityErrorEvent):void {
				trace("securityErrorHandler: " + event);
			}
			/*得到选择的图片*/
			private function selectHandler(event:Event):void {
				var file:FileReference = FileReference(event.target);
				/**将文件加载至内存，预览出来**/
				fileReference.load();
			}
			/*----------打开本地图片---------------*/
			private function btnClick():void   
			{   
				fileReference.browse(getTypes());
				//flex调用JS中Browser函数
				//ExternalInterface.call("openBrowser");
			}   
			
			/*------------图片加载并设置大小---------------------*/
			private function imgLoadFinish(evt:Event):void
			{
				//原始图片的大小   --- 第一次加载的时候这种方法获取不到图片的真实大小
				//var real_width:Number = img.contentWidth ;
				//var real_height:Number = img.contentHeight;
				
				var real_width:Number = evt.currentTarget.content.width;
				var real_height:Number = evt.currentTarget.content.height;
				//容器的大小
				var flashWidth:Number = divMain.width;
				var flashHeight:Number = divMain.height;
				
				//Alert.show("图片源文件大小："+ real_width +" * " +real_height + "\n" + "容器大小： " + flashWidth +" * " +flashHeight,"容器、图片尺寸信息" );
				
				//比值
				var w_bi:Number = real_width/width;
				var h_bi:Number = real_height/height;
				if(w_bi < 1 && h_bi <1)
				{	
					//第一次也不行 不能真正获取到真实大小
					//img.width = img.content.width;
					//img.height = img.content.height;
					
					img.width = evt.currentTarget.content.width;
					img.height = evt.currentTarget.content.height;
					
					//Alert.show("img大小："+ img.content.width +" * " + img.content.height + "\n" + "evt大小： " + evt.currentTarget.content.width +" * " + evt.currentTarget.content.height,"w_bi < 1 && h_bi <1" );
					//Alert.show("图片宽高都比容器小");
				}
				else
				{
					if(w_bi > h_bi)
					{
						img.width = flashWidth;
						img.height = real_height * flashWidth / real_width;
						//Alert.show("w_bi > h_bi" + img.width + "* " + img.height);
					}
					else
					{
						img.height = flashHeight;
						img.width = real_width * flashHeight / real_height;
						//Alert.show("w_bi < h_bi"  + img.width + "* " + img.height);
					}
				}
				img.x = (flashWidth - img.width) / 2;
				img.y = (flashHeight - img.height) / 2;
				var fileSizekb:String=((byteArray.length)/1024).toFixed(0);//将字节转化为kb 并去掉小数点后面的数字
				labelName.visible=true;
				labelSize.visible=true;
				labelSizeKb.visible=true;
				buttonBig.enabled=true;
				buttonSmall.enabled=true;
				degreesUp.enabled=true;
				degreesDown.enabled=true;
				buttonReset.enabled=true;
				upLoad.enabled=true;
				fileInfo.text = fileReference.name;
			    fileSize.text = real_width +" * " +real_height;	
				fileSizeKb.text=fileSizekb+"kb";
			}
			private function doSave():void{
				Alert.yesLabel="确定";
				Alert.noLabel="取消";
				Alert.show("是否确定上传图片？","系统提示",3,this,photoUpLoad);
			}
			/*----------------上传字符数组----------------*/
			public function photoUpLoad(event:CloseEvent):void{
				if(event.detail==Alert.NO)return;
				if(fileReference.data.length!=-1){
				image.pic02=pic02;//301主键
				image.pic04=fileReference.name; 
		   		imageMessage.imageByte=fileReference.data;
				image.pic07=systemUser.institutionCode;
				image.pic08=this.pic08;
				image.pic09=this.pic09;
				image.pic10=this.pic10;
				pictureService.saveImage(image,imageMessage);
				upLoad.enabled=false;
				}else{
					Alert.show("图片不存在","系统提示");
				}
				
			}
			
			private function saveImage_result(event:FaultEvent):void{
				Alert.show(event.message.toString());
			}
			private function resultSaveImage(event:ResultEvent):void{
				imageMessage=event.result as PictureMessage;
				if(imageMessage.status==false){
					Alert.show(imageMessage.message,"系统提示");
				}else{
					Alert.show(imageMessage.message,"系统提示");
				}
			} 	
			/*-----------------图片加载过后操作图片----------------------*/
			private function KeyboardListener(event:KeyboardEvent):void{
				if(event.keyCode==Keyboard.ESCAPE){
					Alert.yesLabel = '是'; 
					Alert.noLabel = '否';
					Alert.show('确认关闭窗口？','系统提示',1|2,this,escEventHandle);
				}
			}
			
			private function escEventHandle(event:CloseEvent):void
			{
				if(event.detail == Alert.YES){
					this.closeTitleWindow();
				} else {
					this.setFocus();
				}
			}
			//旋转初始值
			private var rotateDeg:Number=0;
			private function initData():void{
			}
			//旋转
			private function degreesToRadians():Number { 
				return (Math.PI /4); 
			} 
			/**
			 * 判断是左旋转还是有旋转
			 * */
			private function button_click(evt:Event):void {
				var radians:Number;
				switch (evt.currentTarget) {
					case degreesDown:
						radians=degreesToRadians();
						break;
					case degreesUp:
						radians=-degreesToRadians();
						break;
				}
				var offsetWidth:Number = img.width / 2;
				var offsetHeight:Number = img.height / 2;
				var tempMatrix:Matrix = img.transform.matrix;
				tempMatrix.translate(-offsetWidth, -offsetHeight);
				tempMatrix.rotate(radians);
				tempMatrix.translate(+offsetWidth, +offsetHeight);
				img.transform.matrix = tempMatrix;
				rotateDeg = img.rotation;
			}
			public function mouseMove(event:MouseEvent):void{
				if(event.buttonDown){
					var x:Number=event.stageX-oldx;//移动的x坐标
					var y:Number=event.stageY-oldy;//移动的y坐标
					oldx=event.stageX;  //把当时的坐标 给oldx oldy
					oldy=event.stageY;
					img.move(img.x+x,img.y+y); //move 是移动函数
				}
			}
			/*-----------------鼠标滚轮控制-------------------*/
			private function doMouseWheel(evt:MouseEvent):void {
				var tempMatrix:Matrix = img.transform.matrix;
				if(evt.delta > 0){//放大
					tempMatrix.scale(1.1, 1.1);	
				} else if(evt.delta < 0){//缩小
					tempMatrix.scale(0.9, 0.9);
				}
				img.transform.matrix = tempMatrix;
			}
			
			private function mouseDown(event:MouseEvent):void{
				CursorManager.removeAllCursors();
				oldx=event.stageX; // 当鼠标按下时,就把当时的坐标 给oldx oldy
				oldy=event.stageY;
			}
			
			private function mouseUp(event:MouseEvent):void{
				CursorManager.removeAllCursors();
			}
			
			//恢复原装
			private function resetImage():void { 
				var tempMatrix:Matrix = img.transform.matrix;
				tempMatrix.identity();
				img.transform.matrix = tempMatrix;
				rotateDeg = img.rotation;
			} 
			//放大
			private function toBig():void{
				var tempMatrix:Matrix = img.transform.matrix;
				tempMatrix.scale(1.1, 1.1);
				img.transform.matrix = tempMatrix;
				rotateDeg = img.rotation;
			}
			//缩小
			private function toSmall():void{
				var tempMatrix:Matrix = img.transform.matrix;
				tempMatrix. scale(0.9, 0.9);
				img.transform.matrix = tempMatrix;
				rotateDeg = img.rotation;
			}
			
		]]>
	</fx:Script>
<!--	<s:Panel id="winDIV" width="1596" height="676" horizontalCenter="246" title="{winDIVTitle}"
			 verticalCenter="-41">-->
	<s:VGroup width="684" height="600">
		<mx:Canvas id="divMain" x="1" y="0" width="684" height="510"  horizontalScrollPolicy="off" verticalScrollPolicy="off"
				   mouseWheel="doMouseWheel(event)">
			<mx:Image id="img" x="0" y="0" width="684"  horizontalAlign="center" verticalAlign="middle"
					  maintainAspectRatio="true" mouseDown="mouseDown(event)"
					  mouseMove="mouseMove(event)" mouseUp="mouseUp(event)" scaleContent="true"/>
		</mx:Canvas>
	<s:VGroup width="684" height="105">
	<s:HGroup width="684">
		<s:Label id="labelName" visible="false" width="94" height="30" fontSize="15"
				 paddingLeft="9" text="图片名称:" verticalAlign="middle"/>
		<s:Label id="fileInfo" x="56" y="554" width="585" height="30" maxDisplayedLines ="1" verticalAlign="middle" />
	</s:HGroup>
	<s:HGroup width="684" horizontalAlign="right" gap="20" paddingRight="10">
		<s:Label id="labelSize" visible="false" x="3" width="77" height="30" fontSize="15"
				 text="图片尺寸:" verticalAlign="middle" textAlign="center"/>
		<s:Label id="fileSize" width="144" height="30" verticalAlign="middle" />
		<s:Label id="labelSizeKb" text="图片大小:" verticalAlign="middle"  fontSize="15"  height="30" visible="false"/>
		<s:Label id="fileSizeKb" width="120" height="30" verticalAlign="middle"/>
		<s:Button id="scan" x="585" y="551" width="83" height="30" label="浏览文件" click="btnClick()"/>
		<s:Button id="upLoad" x="753" y="550" width="83" height="30" label="上传文件" click="doSave()"/>
	</s:HGroup>
	<s:HGroup width="684"  gap="20" horizontalAlign="right" paddingRight="10">
		<s:Button id="buttonBig" width="83" height="30" label="放大" autoRepeat="true" buttonDown="toBig();" click="toBig();" enabled="false"/>
		<s:Button id="buttonSmall" label="缩小" autoRepeat="true" click="toSmall();" buttonDown="toSmall();" height="30" width="83" enabled="false"/>
		<s:Button label="左旋转" id="degreesUp" autoRepeat="true" click="button_click(event);"  buttonDown="button_click(event);"  height="30" width="83" enabled="false"/>
		<s:Button label="右旋转" id="degreesDown" autoRepeat="true" click="button_click(event);" buttonDown="button_click(event);"  height="30" width="83" enabled="false"/>
		<s:Button id="buttonReset" label="还原" click="resetImage();" height="30" width="83" enabled="false"/>
		<s:Button id="buttonClose" label="关闭" click="closeTitleWindow();" height="30" width="83"/>	
	</s:HGroup>
	</s:VGroup>
	</s:VGroup>
	</s:TitleWindow>