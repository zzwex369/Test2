<?xml version="1.0" encoding="utf-8"?>
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  width="100%" height="25"
		  verticalAlign="middle" horizontalAlign="left">
	<fx:Declarations>
		
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.ItemClickEvent;
			
			import spark.components.DataGrid;
			import spark.events.IndexChangeEvent;
			
			[Bindable]
			public var pagerFunction:Function = null;
			
			[Bindable]
			public var currentPageIndex:int = 1;
			
			[Bindable]
			private var isInitial:Boolean = true;
			
			[Bindable]
			private var pageCount:uint = 0;
			
			[Bindable]
			private var navigatorSize:uint = 3;
			
			[Bindable]
			public var navigatorData:ArrayCollection;
			
			[Bindable]
			public var pageSizeDropDownListData:ArrayCollection = null;
			
			[Bindable]
			public var dataGrid:DataGrid = null;
			
			[Bindable]
			public var pageSize:uint = 3;
			
			[Bindable]
			public var rowCount:uint;
			
			[Bindable]
			private var navigatorPageIndex:uint = 1;
			
			[Bindable]
			private var pagerBarPageCount:uint;
			
			[Bindable]
			public var resultData:ArrayCollection;
			
			[Bindable]
			private var viewNavigatorData:ArrayCollection;
			
			[Bindable]
			private var isCreateNavigatorBar:Boolean = true;
			
			public function dataBind():void{
				if(this.isInitial){
					if(this.pageSizeDropDownListData == null){
						this.pageSizeDropDownListData = new ArrayCollection();
						this.pageSizeDropDownListData.addItem({label:40, data:40});
						this.pageSizeDropDownListData.addItem({label:80, data:80});
						this.pageSizeDropDownListData.addItem({label:100, data:100});
					}
					this.isInitial = false;
				}
				//this.pageSizeDropDownList.dataProvider = this.pageSizeDropDownListData;
				this.refreshDataGridDataProvider();
			}
			
			private function refreshDataGridDataProvider():void{
				this.pageCount = this.rowCount % pageSize == 0 ? Math.floor(this.rowCount / pageSize) : Math.floor(this.rowCount / pageSize) +1;
				this.pagerBarPageCount = this.pageCount % this.navigatorSize == 0 ? this.pageCount / this.navigatorSize : Math.floor(this.pageCount / this.navigatorSize) + 1;
				this.dataGrid.dataProvider = this.resultData;
				this.createNavigatorBar();
			}
			
			private function createNavigatorBar():void
			{
				this.navigatorData = new ArrayCollection();
				for(var i:uint = 1; i <= this.pageCount; i++){
					this.navigatorData.addItem(i);
				}
				if(this.currentPageIndex > this.pageCount){
					if(this.pageCount > 0) {
						this.currentPageIndex = this.pageCount;
					} else {
						this.currentPageIndex = 1;
					}
					
					if(this.pageCount % this.navigatorSize == 0){
						this.viewNavigatorData = new ArrayCollection(this.navigatorData.source.slice((Math.floor(this.pageCount / this.navigatorSize) - 1) * this.navigatorSize, Math.floor(this.pageCount / this.navigatorSize) * this.navigatorSize));
					}else{
						this.viewNavigatorData = new ArrayCollection(this.navigatorData.source.slice(Math.floor(this.pageCount / this.navigatorSize) * this.navigatorSize, (Math.floor(this.pageCount / this.navigatorSize) +1) * this.navigatorSize));
					}
					this.pageNavigator.dataProvider = this.viewNavigatorData;
				}
				if(this.isCreateNavigatorBar){
					
					this.viewNavigatorData = new ArrayCollection(this.navigatorData.source.slice((this.navigatorPageIndex - 1) * this.navigatorSize, this.navigatorPageIndex * this.navigatorSize));
					this.pageNavigator.dataProvider = this.viewNavigatorData;
					if(this.pageCount > this.navigatorSize){
						
						var viewNavigatorDataA:ArrayCollection;
						if(this.pageCount % this.navigatorSize == 0){
							viewNavigatorDataA = new ArrayCollection(this.navigatorData.source.slice((Math.floor(this.pageCount / this.navigatorSize) - 1) * this.navigatorSize, Math.floor(this.pageCount / this.navigatorSize) * this.navigatorSize));
							
						}else{
							viewNavigatorDataA = new ArrayCollection(this.navigatorData.source.slice(Math.floor(this.pageCount / this.navigatorSize) * this.navigatorSize, (Math.floor(this.pageCount / this.navigatorSize) +1) * this.navigatorSize));
						}
						
						var viewNavigatorDataB:ArrayCollection;
						viewNavigatorDataB = new ArrayCollection(this.navigatorData.source.slice(0, 3));
						
					}else{
						this.pageNavigator.dataProvider = this.navigatorData;
					}
					
				}
				//this.isCreateNavigatorBar = false;
			}
			
			private function pageNavigatorButtonClick(event:ItemClickEvent):void{
				this.currentPageIndex = int(event.item);
				this.pagerFunction(this.currentPageIndex, this.pageSize);
			}
			
			
			public function dataGridRefresh():void{
				this.pagerFunction(this.currentPageIndex, this.pageSize);
			}
		]]>
	</fx:Script>
	<s:HGroup verticalAlign="middle">
		<mx:LinkBar id="pageNavigator" itemClick="pageNavigatorButtonClick(event)" dataProvider="{viewNavigatorData}"/>
	</s:HGroup>

</s:HGroup>