<?xml version="1.0" encoding="utf-8"?>
<s:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  width="100%" height="100%"
		  creationComplete="moduleCreationCompleteHandler(event)"
		  xmlns:component="com.xyw.sys.custom.component.*">
	<fx:Declarations>
		<s:RemoteObject id="systemService" destination="systemService" endpoint="{this.parentApplication.contextRoot}/messagebroker/amf" showBusyCursor="true">
			<s:method name="getRoles" result="getRolesHandler(event)"/>
		</s:RemoteObject>
	</fx:Declarations>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace component "com.xyw.sys.custom.component.*";
		component|CustomCheckBoxTree
		{
			defaultLeafIcon: ClassReference(null); 
		}
		mx|Alert{
			/*borderColor: red;*/
			borderVisible:false;
			backgroundColor: yellow;
			dropShadowVisible: true;
			chromeColor: yellow;
			titleStyleName: alertTitle;
			messageStyleName: alertMessage;
			buttonStyleName: alertButton;
		}
		.alertTitle{
			fontSize: 15;
			fontWeight: bold;
			color: black;
		}
		.alertMessage {
			fontWeight: normal;
			color: black;
		}
		.alertButton {
			color: black;
		}
		
		s|DropDownList
		{
			skinClass:ClassReference("com.xyw.sys.custom.skin.CustomDropDownListSkin");
			selectionColor:#DDDDDD;
			rollOverColor:#EEEEEE;
			cornerRadius:3;
		}
		s|Button
		{
			skinClass:ClassReference("com.xyw.sys.custom.skin.CustomButtonSkin");
			cornerRadius:5;
		}
		s|Label
		{
			fontSize:13;
		}
		s|DataGrid
		{
			borderAlpha:"0.3";
			skinClass:ClassReference("com.xyw.sys.custom.skin.CustomDataGridSkin");
			alternatingRowColors:"[#FFFFFF,#EEEEEE]";
		}
		
	</fx:Style>
	<fx:Script>
		<![CDATA[
			import com.xyw.module.xtwh.model.D804;
			import com.xyw.module.xtwh.model.D804Request;
			import com.xyw.module.xtwh.model.D804Response;
			import com.xyw.sys.constant.SystemConstant;
			import com.xyw.sys.model.SessionException;
			import com.xyw.sys.model.SystemUser;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import spark.events.GridSelectionEvent;
			
			Alert.okLabel = "确认";
			Alert.yesLabel = "是";
			Alert.noLabel = "否";
			Alert.cancelLabel = "取消";
			
			public var systemUser:SystemUser = null;
			private var d804:Object = null;
			private var addPrivilegeTitleWindow:AddPrivilegeTitleWindow = null;
			
			private function moduleCreationCompleteHandler(event:FlexEvent):void
			{
				this.systemUser = this.parentApplication.systemUser;
				this.roleDataGrid.addEventListener(GridSelectionEvent.SELECTION_CHANGE, onSelectionChange);
			}
			
			private function query(event:MouseEvent):void
			{
				var d804Request:D804Request = new D804Request();
				this.systemService.getRoles(d804Request);
			}
			
			private function getRolesHandler(event:ResultEvent):void
			{
				var d804Response:D804Response = event.result as D804Response;
				if(d804Response.errorMessage == null) {
					this.roleDataGrid.dataProvider = d804Response.d804s;
				} else {
					Alert.show(d804Response.errorMessage, "系统提示");
					return;
				}
			}
			
			private function onSelectionChange(event:GridSelectionEvent):void
			{
				this.d804 = DataGrid(event.target).selectedItem;
			}
			
			private function addPrivilege(event:MouseEvent):void
			{
				if(this.d804 != null) {
					PopUpManager.removePopUp(this.addPrivilegeTitleWindow);
					addPrivilegeTitleWindow = new AddPrivilegeTitleWindow();
					addPrivilegeTitleWindow.owner = this;
					addPrivilegeTitleWindow.d804_01 = this.d804.d804_01;
					PopUpManager.addPopUp(addPrivilegeTitleWindow, this);
					var x:Number = (this.width - addPrivilegeTitleWindow.width) / 2;
					var y:Number = (this.height - addPrivilegeTitleWindow.height) / 2;
					addPrivilegeTitleWindow.move(x, y);
					
				} else {
					Alert.show("请选择要分配权限的角色!", "系统提示");
					return;
				}
			}
			
			private function faultHandler(event:FaultEvent):void
			{
				var sessionException:SessionException = event.fault.rootCause as SessionException;
				var errorCode:String = "";
				try {
					errorCode = sessionException.errorCode;
					if(errorCode == SystemConstant.LOGIN_USER_INFO_IS_NULL) {
						Alert.show(sessionException.errorMessage, "系统提示");
						return;
					}
				} catch(error:Error) {
					Alert.show("系统异常", "系统提示");
				}
			}
			
		]]>
	</fx:Script>
	<s:VGroup width="100%">
		<mx:TabNavigator  width="100%" chromeColor="#ffffff" creationPolicy="all">
			<s:NavigatorContent  label="角色管理" width="100%">
				<s:HGroup width="100%" paddingBottom="5" paddingLeft="10" paddingRight="10" verticalAlign="middle">
					<s:HGroup width="100%" horizontalAlign="right">
						<s:Button label="查询" click="query(event)"/>
						<s:Button label="分配权限" click="addPrivilege(event)"/>
					</s:HGroup>
				</s:HGroup>	
			</s:NavigatorContent>
		</mx:TabNavigator>
		<s:DataGrid id="roleDataGrid" editable="true" rowHeight="22" width="100%" height="330" alternatingRowColors="[#FFFFFF,#EEEEEE]" skinClass="com.xyw.sys.custom.skin.CustomDataGridSkin">  
			<s:columns>
				<s:ArrayList>
					<s:GridColumn headerText="序号" width="40" itemRenderer="com.xyw.sys.custom.itemrenderer.CustomGridColumnItemRenderer" editable="false"/>
					<s:GridColumn headerText="角色编号" dataField="d804_01" editable="false"/>
					<s:GridColumn headerText="角色名称" dataField="d804_02" editable="false"/>
					<s:GridColumn headerText="区域级别" dataField="d804_03" editable="false"/>
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
	</s:VGroup>
</s:Module>