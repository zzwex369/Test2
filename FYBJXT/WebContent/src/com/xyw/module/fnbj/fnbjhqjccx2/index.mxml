<?xml version="1.0" encoding="utf-8"?>
<s:Module xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:component="com.xyw.sys.custom.component.*"
		  width="100%" height="100%" creationComplete="moduleCreationCompleteHandler(event)">
	<fx:Declarations>
		<s:RemoteObject id="f401Service" destination="f401Service" endpoint="{this.parentApplication.contextRoot}/messagebroker/amf" showBusyCursor="true">
			<s:method name="queryF401" result="queryF401Handle(event)"/>
			<s:method name="deleteF401" result="deleteF401Handle(event)"/>
		</s:RemoteObject>
	</fx:Declarations>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		
		s|DropDownList
		{
			skinClass:ClassReference("com.xyw.sys.custom.skin.CustomDropDownListSkin");
			selectionColor:#DDDDDD;
			rollOverColor:#EEEEEE;	
		}
		s|Button
		{
			skinClass:ClassReference("com.xyw.sys.custom.skin.CustomButtonSkin");
		}
		s|Label
		{
			fontSize:13;
		}
		s|DataGrid
		{
			borderAlpha:"0.3";
			skinClass:ClassReference("com.xyw.sys.custom.skin.CustomDataGridSkin");
			alternatingRowColors:"[#FFFFFF,#EEEEEE]";
		}
		s|SkinnableTextBase:disabledWithPrompt {
			color: #000000;
			fontStyle:normal;
			
		}
		s|SkinnableTextBase:normalWithPrompt {
			color: #000000;
			fontStyle:normal;
			
		}
		mx|ToolTip
		{
			fontSize:15;  
			color:#FF6699; 
		}
	</fx:Style>
	<fx:Script>
		<![CDATA[
			import com.xyw.module.fnbj.fnbjhqjcdj2.ManTitleWindow;
			import com.xyw.module.fnbj.model.F401Request;
			import com.xyw.module.fnbj.model.VF401;
			import com.xyw.sys.custom.component.CompMethod;
			import com.xyw.sys.custom.component.CustomIcon;
			import com.xyw.sys.model.SystemUser;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.DateField;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.formatters.DateFormatter;
			import mx.managers.PopUpManager;
			import mx.messaging.AbstractConsumer;
			import mx.rpc.events.ResultEvent;
			import mx.utils.StringUtil;
			
			import spark.events.GridSelectionEvent;
			
			private var vf401:Object =null;
			public var f401Request:F401Request =null; 
			public var systemUser:SystemUser =null;
			
			private function moduleCreationCompleteHandler(event:FlexEvent):void
			{
				this.systemUser = this.parentApplication.systemUser;
				//检查读卡权限
				if(this.systemUser.duka == "1"){
					this.duka1.enabled = true;
				}
				
				
				this.certificateDataGrid.addEventListener(GridSelectionEvent.SELECTION_CHANGE,onSelected);
			}
			
			private function onSelected(event:GridSelectionEvent):void
			{
				this.vf401 = DataGrid(event.target).selectedItem;
			}
			
			/*----------获取查询条件数据---------*/
			private function initQueryParam():void
			{
				f401Request = new F401Request();
				try
				{	
					
					f401Request.f40195=F401_95.getInstitutionCode();

					if(F401_02.text||F401_06.text){
						f401Request.f40102 = StringUtil.trim(this.F401_02.text);  //姓名
						f401Request.f40106 = StringUtil.trim(this.F401_06.text);  //证件号码
					}else{ 
						f401Request.timeStr = DateField.stringToDate(this.timeStart.text,"YYYY-MM-DD");
						f401Request.timeEnd = DateField.stringToDate(this.timeEnd.text,"YYYY-MM-DD");
					}
				
					f401Request.f40103 ="1";
				} 
				catch(error:Error) 
				{		
				}
			}
			
			private function query(event:MouseEvent):void
			{
				f401Request = new F401Request();
				this.initQueryParam();
				f401Request.parameterPageindex = 1;
				f401Request.parameterPagesize = 20;
				this.f401Service.queryF401(f401Request);
			}
			protected function queryF401Handle(event:ResultEvent):void
			{
				var f401Response:Object = event.result;
				var flag:String = f401Response.flag;
				var listVF401:ArrayCollection = f401Response.vf401s;
				var rowCount:Number = f401Response.rowCount;
				if(f401Response.errorMessage == null)
				{ 
					this.pagerBar.pageSize = 20;
					this.pagerBar.dataGrid = this.certificateDataGrid;
					this.pagerBar.rowCount = rowCount;
					this.pagerBar.resultData = listVF401;
					this.pagerBar.dataBind();
					this.pagerBar.pagerFunction = pagerFunction;
					if(rowCount > 0) {
						this.pagerBar.enabled = true;
					}
					this.vf401 = null;
				} else {
					Alert.show(f401Response.errorMessage, "系统提示");
				}
			}
			
			public function pagerFunction(currentPageIndex:int, pageSize:int):void
			{
				f401Request = new F401Request();
				this.initQueryParam();
				f401Request.parameterPageindex = currentPageIndex;
				f401Request.parameterPagesize = pageSize;
				this.f401Service.queryF401(f401Request);
			}
			public function update(event:MouseEvent):void
			{
				if(this.vf401 == null){
					Alert.show("请选择要操作的行");
					return;
				}else{
					var window:title =new title();
					window.vf401 = this.vf401;
					CompMethod.popUpTitleWindow(window,this,true);
					window.addEventListener("ok_click",refresh1);
				}
			}
			public function refresh1(event:Event):void{
				this.vf401=null;
				refresh();
			}
			public function deleteF401(event:MouseEvent):void
			{
				if(this.vf401 == null){
					Alert.show("请选择要操作的行");
					return;
				}
				
				f401Request.f40101 = this.vf401.f40101;  
				f401Request.f40102 = this.vf401.f40102;  //女性姓名
				f401Request.f40113 = this.vf401.f40113;  //配偶姓名
				f401Request.f40106 = this.vf401.f40106;   //女性身份证号
				f401Request.f40194 = this.vf401.f40194;  //配偶身份证号
				
				Alert.yesLabel = '是'; 
				Alert.noLabel = '否';
				Alert.show('确认删除信息？','删除体检信息',1|2,this,deleteValidate);
			}
			
			//确认是否删除信息
			protected function deleteValidate(event:CloseEvent):void
			{
				if(event.detail == Alert.YES){
					this.f401Service.deleteF401(f401Request);
				}
			}
			
			protected function deleteF401Handle(event:ResultEvent):void
			{
				var f401Response:Object = event.result;
				if(f401Response.errorMessage == null){
					if(f401Response.promptMessage != null){
						Alert.show(f401Response.promptMessage, "系统提示");
					}
					refresh();
				} else {
					Alert.show(f401Response.errorMessage, "系统提示");
				}
			}
			public function refresh():void
			{
				f401Request = new F401Request();
				this.initQueryParam();
				f401Request.parameterPageindex = this.pagerBar.currentPageIndex;
				f401Request.parameterPagesize = 20;
				this.f401Service.queryF401(f401Request);
			}
			
			//详情，即：体检表
			private function query2(event:MouseEvent,status:String):void
			{
				if(this.vf401 == null)
				{
					Alert.show("请选择要操作的行!","系统提示");
					return;
				}
				var suffixPath:String=status=='1'?'men_tjb':'hqyxjczm';
							
				var urlRequest:URLRequest = new URLRequest();
					var selectF40101:Number = vf401.f40101;
					var variables:URLVariables = new URLVariables();
					variables.f40101=encodeURIComponent(vf401.f40101);
					urlRequest.data=variables;
					urlRequest.method=URLRequestMethod.POST;
					urlRequest.url=this.parentApplication.contextRoot +
						"/print_new/PrintDirect/"+suffixPath+".jsp";
					navigateToURL(urlRequest);
					//Alert.show(selectF40101.toString());
					/* urlRequest = new URLRequest(this.parentApplication.contextRoot + "/print_new/PrintDirect/men_tjb.jsp?f40101=" + selectF40101);
					navigateToURL(urlRequest,"_blank"); */
//					var man:ManTitleWindow = new ManTitleWindow();
//					man.diqucode = this.systemUser.institutionCode;
//					man.f40101 = selectF40101;
//					CompMethod.popUpTitleWindow(man,this,true);
			}
			
			//读卡(父亲)
			protected function readCard_father(event:MouseEvent):void
			{
				try
				{
					var array:Array = CompMethod.read_card("男");//性别
					if(!array)
						return ;
					this.F401_02.text = array[0];//姓名
					this.F401_06.text = array[5];//身份证号
						//	this.F401_04.text = array[3];//出生日期
						//	this.F401_09.text = array[4];//现住址
					var nation:String = array[2] + "族";//民族
						//	var nationDataProvider:ArrayCollection = ArrayCollection(this.F401_07.dataProvider);
						//	var nationIndex:int = getNationDropDownListSelectedIndex(nationDataProvider,nation);
						//	this.F401_07.selectedIndex = nationIndex;
							//setF301_23(null); 
							
						//	var sexDataProvider:ArrayCollection = ArrayCollection(this.F401_03.dataProvider);
						//	var sexIndex:int = getNationDropDownListSelectedIndex(sexDataProvider,sex);
						//	this.F401_03.selectedIndex = sexIndex;
					query(null);
				} 
				catch(error:Error) 
				{
					Alert.show("读卡失败！");
				}
			}
		]]>
	</fx:Script>
	<mx:TabNavigator width="100%" chromeColor="#ffffff" creationPolicy="all">
		<s:NavigatorContent width="100%" label="综合查询">
			<s:VGroup width="100%">
				<s:HGroup width="100%" paddingBottom="5" paddingLeft="10" paddingRight="10" verticalAlign="middle">
					<s:Label text="检查单位"/>
					<component:InstitutionComboBox id="F401_95" width="900"  villageVisible="true"/>
				</s:HGroup>
				<s:HGroup width="100%" paddingBottom="5" paddingLeft="10" paddingRight="10"
						  verticalAlign="middle">
					<s:Label text="检查日期"/><component:CustomRangeDateField id="timeStart" isSelectFirst="true"/>
					<s:Label text="至"/><component:CustomRangeDateField id="timeEnd" isSelectNow="true"/>
					
					<s:Label id="lbl" color="#FD0909"  fontSize="16" 
							 text="!  注意：若输入内容，查询不受日期条件限制，有读卡功能的直接读卡就可以查询"/>
				</s:HGroup>
				<s:HGroup width="100%" paddingBottom="2" paddingLeft="10" paddingRight="10" verticalAlign="middle">
					<s:Label text="男性姓名"/><s:TextInput id="F401_02"/>
					<s:Label text="证件号码"/><s:TextInput id="F401_06" width="200"/>
					<s:Button id="duka1"  label="读卡" click="readCard_father(event)" enabled="false" icon="{CustomIcon.READCARD}"/>
					<s:Button label="查询" click="query(event)" icon="{CustomIcon.QUERY}"/>
					<s:Button label="修改" click="update(event)" icon="{CustomIcon.MODYFY}"/>
					<s:Button label="删除" click="deleteF401(event)" icon="{CustomIcon.DEL}"/>
					
					<s:Button label="打印男性婚前医学检查表" click="query2(event,'1')" icon="{CustomIcon.PRINTER}"/>
					<s:Button label="打印婚前医学检查证明及存根" click="query2(event,'2')" icon="{CustomIcon.PRINTER}"/>
				</s:HGroup>
			</s:VGroup>
		</s:NavigatorContent>
		
	</mx:TabNavigator>
	<s:Scroller y="123" width="100%" height="560" horizontalScrollPolicy="auto" verticalScrollPolicy="auto">
		<s:VGroup width="100%" paddingBottom="10">
			<s:DataGrid id="certificateDataGrid" width="100%" height="340" alternatingRowColors="[#FFFFFF,#EEEEEE]" 
						rowHeight="22" skinClass="com.xyw.sys.custom.skin.CustomDataGridSkin">
				<s:columns>
					<s:ArrayList>
						<s:GridColumn visible="false" dataField="f40101" headerText="主键"/>
						<s:GridColumn width="40" editable="false" headerText="序号" itemRenderer="com.xyw.sys.custom.itemrenderer.CustomGridColumnItemRenderer"/>
						<s:GridColumn width="80" dataField="f40102" headerText="男性姓名"/>
						<s:GridColumn width="150" dataField="f40106" headerText="证件号码"/>
						<s:GridColumn width="100" dataField="f40104Str" headerText="出生日期"/>
						<s:GridColumn width="80" dataField="f40113" headerText="配偶姓名"/>
						<s:GridColumn width="150" dataField="f40194" headerText="配偶证件号码"/>
						<s:GridColumn width="80" dataField="f40117Zh" headerText="血缘关系"/>
						<s:GridColumn width="80" dataField="f40121Zh" headerText="手术史 "/>
						<s:GridColumn width="80" dataField="f40112" headerText="联系电话"/>
						<s:GridColumn width="100" dataField="f40110Zh" headerText="现住址"/>
						<s:GridColumn width="80" dataField="f40192" headerText="检查医生"/>
						<s:GridColumn width="80" dataField="f40193Str" headerText="检查日期"/>
						<s:GridColumn dataField="f40195Zh" headerText="检查单位"/>
					</s:ArrayList>
				</s:columns>
			</s:DataGrid>
			<component:PagerBar id="pagerBar" enabled="false"/>
			
		</s:VGroup>	
	</s:Scroller>	
</s:Module>
